<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iacutone Deep Thoughts]]></title>
  <link href="http://iacutone.github.io/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-11-07T13:50:41-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prototypes and Constructors in Javascript]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/07/prototypes-and-constructors-in-javascript/"/>
    <updated>2015-11-07T12:57:08-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/07/prototypes-and-constructors-in-javascript</id>
    <content type="html"><![CDATA[<p>I usually do not need to write code using neither constructors nor prototypes in Javascript. So, I always forget how to write them when I need to use them.</p>

<h2>Constructor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">Say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">say</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Say</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">say</span><span class="p">.</span><span class="nx">hello</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prototype</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">Say</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>   <span class="nx">Say</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">say</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Say</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">say</span><span class="p">.</span><span class="nx">hello</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Helpful Links</p>

<p><a href="http://stackoverflow.com/questions/310870/use-of-prototype-vs-this-in-javascript">Use of &lsquo;prototype&rsquo; vs. &lsquo;this&rsquo; in JavaScript?</a></p>

<p><a href="http://stackoverflow.com/questions/4508313/advantages-of-using-prototype-vs-defining-methods-straight-in-the-constructor">Advantages of using prototype, vs defining methods straight in the constructor?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Function]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/30/shell-function/"/>
    <updated>2015-10-30T22:34:34-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/30/shell-function</id>
    <content type="html"><![CDATA[<p>I have been using youtube-dl every week. The application is a &ldquo;Small command-line program to download videos from YouTube.com and other video sites.&rdquo; It&rsquo;s super useful. However, it default downloads to the current terminal directory. Let&rsquo;s write a simple shell script in order to place all downloaded files from youtube-dl in the same directory.</p>

<figure class='code'><figcaption><span>.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function</span> mp3 <span class="o">{</span>
</span><span class='line'>  <span class="c"># Download all of the things to /Downloads</span>
</span><span class='line'>
</span><span class='line'>  youtube-dl --default-search<span class="o">=</span>ytsearch: <span class="se">\</span>
</span><span class='line'>             --output<span class="o">=</span><span class="s2">&quot;Downloads/%(title)s.%(ext)s&quot;</span> <span class="s2">&quot;$*&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;$<em>&rdquo; signifies the string following mp3, the example below, &ldquo;$</em>&rdquo; is the URL arument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  mp3 https://www.youtube.com/watch<span class="se">\?</span>v<span class="se">\=</span>9fYeiGeuTFA
</span></code></pre></td></tr></table></div></figure>


<p>Now I can run the above script in order to download the video from the youtube URL.!</p>

<p>Helpful Links</p>

<p><a href="https://github.com/rg3/youtube-dl">youtube-dl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Setter Method in a Rails Model]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model/"/>
    <updated>2015-10-23T15:30:53-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model</id>
    <content type="html"><![CDATA[<p>At Fractured Atlas, we are trying to move away from the additional complexity of using callbacks. For example, let&rsquo;s say we need to do something in a before_save callback such as lowercase a user&rsquo;s email.</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">before_save</span><span class="p">:</span> <span class="n">lowercase_email</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lowercase_email</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How is this code implemented without using before_save? One method would be overriding the setter accessor.</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">email</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'> <span class="n">email</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'> <span class="k">super</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when the email attribute is updated, my email setter method is called.</p>

<p>Currently, both implementations for downcasing an email are straightforward. However, as the application grows, the before_save callback is more difficult to test and maintain. The before_save is implicit and might have unexpected side effects. Here is a basic spec.</p>

<figure class='code'><figcaption><span>user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#lowercase_email&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;GNARLY@email.com&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;lowercases the email&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">lowercase_email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;gnarly@email.com&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, let&rsquo;s test the <em>behavior</em> of what we expect.</p>

<figure class='code'><figcaption><span>user_creation_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;User Creation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;:email&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;GNARLY@email.com&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;it returns a standardized email&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;gnarly@email.com&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first spec is directly testing the callback, whereas the latter spec is testing the <em>behavior</em> of the expected outcome. The latter spec is easier to reason about and change. This is an easy example, but as callbacks grow changing their behavior becomes more difficult. This is especially true if the callbacks are coupled with other models.</p>

<p><em>Helpful Links</em></p>

<p><a href="http://stackoverflow.com/questions/10464793/what-is-the-right-way-to-override-a-setter-method-in-ruby-on-rails">What is the right way to override a setter method in Ruby on Rails?</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord%3a%3aBase-label-Overwriting+default+accessors">Overwriting default accessors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Fetch Method]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method/"/>
    <updated>2015-09-18T18:15:29-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method</id>
    <content type="html"><![CDATA[<p>Checking for values in a Rails params hash is complicated. In this post we will use the #fetch method to ensure nil is not called on a params hash.</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">][</span><span class="ss">:organization_id</span><span class="o">].</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will call #present? on nil if params[:search][:organization_id] does not exist.</p>

<p>A better way to write the conditional:</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">].</span><span class="n">present</span> <span class="ow">and</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">][</span><span class="ss">:organization_id</span><span class="o">].</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing a similar conditional with #fetch:</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break this method down into simpler components:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>  <span class="sr">//</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;searched!&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>  <span class="sr">//</span> <span class="s2">&quot;searched!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="sr">//</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:organization_id</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="sr">//</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like the ability to call #fetch with a default return value if one does not exist. This leads to better ways to handle nil or catch errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Basics]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/09/swift-basics/"/>
    <updated>2015-09-09T18:48:12-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/09/swift-basics</id>
    <content type="html"><![CDATA[<h1>String Interpolation</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Eric&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, \(name)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Hello, Eric&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Dictionaries</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">response</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;id&quot;</span><span class="o">:</span><span class="mi">14</span><span class="p">,</span><span class="s">&quot;email&quot;</span><span class="o">:</span><span class="s">&quot;test@email.com&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="kt">id</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 14</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">email</span> <span class="o">=</span> <span class="n">response</span><span class="p">[</span><span class="s">&quot;email&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;test@email.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Tuples</h1>

<h3>Unnamed Tuples</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">999</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">)</span> <span class="o">=</span> <span class="n">coordinates</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Latitude is \(lat)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Latitude is 100&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Longtitude is \(lon)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Longitude is 999</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Named Tuples</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">response</span> <span class="o">=</span> <span class="p">(</span><span class="nl">code</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="s">&quot;All good&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span><span class="mf">.0</span>
</span><span class='line'><span class="c1">// 200</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span><span class="mf">.1</span>
</span><span class='line'><span class="c1">// &quot;All good&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span><span class="p">.</span><span class="n">code</span>
</span><span class='line'><span class="c1">// 200</span>
</span><span class='line'>
</span><span class='line'><span class="n">respsonse</span><span class="p">.</span><span class="n">message</span>
</span><span class='line'><span class="c1">// &quot;All good&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Swift Classes</h1>

<h3>Creating a class</h3>

<figure class='code'><figcaption><span>Person.swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Person</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">email</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">zip</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">email</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">zip</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">zip</span> <span class="o">=</span> <span class="n">zip</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create data for Person Class</h3>

<figure class='code'><figcaption><span>SampleData.swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">personData</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Eric&quot;</span><span class="p">,</span> <span class="nl">email</span><span class="p">:</span> <span class="s">&quot;eric.iacutone@gmail.com&quot;</span><span class="p">,</span> <span class="nl">zip</span><span class="p">:</span> <span class="mi">12345</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Instantiating Person Class</h3>

<figure class='code'><figcaption><span>PersonViewController.swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">person</span><span class="p">:</span><span class="n">Array</span> <span class="o">=</span> <span class="n">personData</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you copy and paste the the files into a XCode Playground, you can call methods on your person object.</p>

<figure class='code'><figcaption><span>Playground.swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">zip</span>
</span><span class='line'><span class="c1">// 12345</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Enums</h1>

<p>An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code. - <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html">Swift docs</a></p>

<p>Use an enum when you need a consistent data value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">CountryType</span><span class="p">:</span><span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UnitedStates</span> <span class="o">=</span> <span class="s">&quot;United States&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Spain</span> <span class="o">=</span> <span class="s">&quot;Spain&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">self</span> <span class="o">=</span> <span class="p">.</span><span class="n">UnitedStates</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">type</span> <span class="o">=</span> <span class="n">CountryType</span><span class="p">.</span><span class="n">UnitedStates</span><span class="p">.</span><span class="n">rawValue</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;United States&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Structs</h1>

<p>A struct allows you to create a structured data type which provides storage of data using properties and extending its functionality via methods. -<a href="http://blog.teamtreehouse.com/enums-structs-swift">Tree House</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">email</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">country</span><span class="p">:</span> <span class="n">CountryType</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Eric&quot;</span><span class="p">,</span> <span class="nl">email</span><span class="p">:</span> <span class="s">&quot;eric.iacutone@gmail.com&quot;</span><span class="p">,</span> <span class="nl">country</span><span class="p">:</span> <span class="n">CountryType</span><span class="p">.</span><span class="n">UnitedStates</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Eric&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">country</span><span class="p">.</span><span class="n">rawValue</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;United States&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Return to Blogging]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/04/my-return-to-blogging/"/>
    <updated>2015-09-04T19:45:08-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/04/my-return-to-blogging</id>
    <content type="html"><![CDATA[<p>The goal of this blog is to refine my writing skills. In order to fulfill this goal I will write about something interesting I learned on a weekly basis. I find that if I do not get into a routine, I will not fulfill my goal. So, every Friday after work I will post on this blog. I have no goals about the legth of posts, but to write something with clarity and thoughfulness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exceptions in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2014/02/16/exceptions-in-ruby/"/>
    <updated>2014-02-16T18:40:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/02/16/exceptions-in-ruby</id>
    <content type="html"><![CDATA[<p>I inherited some interesting code last week.  A user has the ability to sign into the website with omniauth.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">num</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Enter a number&quot;</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;It&#39;s a 3!&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">raise</span> <span class="s2">&quot;Wrong number, you entered a </span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">num2</span>
</span><span class='line'>  <span class="n">num</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">num2</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">ex</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>Reference</p>


<p><a href='http://www.ruby-doc.org/core-2.1.0/Exception.html'>Ruby Exception Class</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations/"/>
    <updated>2014-01-21T23:46:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations</id>
    <content type="html"><![CDATA[<p> I have been working on refactoring my client side JavaScript validations on an application.  My tech lead gave me some illuminating tips on how to refactor my non-DRY code.  Here is an example of the pre-refactored code.</p>




<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@order</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&#39;your_info&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;2. Your Information&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="s1">&#39;First name*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:first_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;first_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%#</span><span class="c">= f.hidden_field :customer_id, value: current_user.id unless current_user.id == nil </span><span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="s1">&#39;Last name*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:last_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;last_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="s1">&#39;Email*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;email_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Submit your Order&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;btn btn-primary btn-lg&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s2">&quot;Place order?&quot;</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<p>So, let's start with this basic form and sprinkle it with some JQuery and Javascript for client side validations.</p>




<figure class='code'><figcaption><span>users.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Initial State for Form</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.your_info&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validations</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">first_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input#order_first_name&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">last_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input#order_last_name&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input#order_email&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// event listeners</span>
</span><span class='line'><span class="nx">first_name</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateFirstName</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">last_name</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateLastName</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">email</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateEmail</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">validateFirstName</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">first_name_val</span> <span class="o">=</span> <span class="nx">first_name</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">first_name_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;First name needed.&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error_class&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">validateLastName</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">last_name_val</span> <span class="o">=</span> <span class="nx">last_name</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">last_name_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">last_name_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Last name needed.&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error_class&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">last_name_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">validateEmail</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">email_val</span> <span class="o">=</span> <span class="nx">email</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">email_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">email_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Email needed.&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error_class&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">email_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Clearly, this is not DRY and will easily get out of comtrol.  However, using HTML data attributes solves this problem.  Here is a good <a href='http://ejohn.org/blog/html-5-data-attributes/'>summary</a> about data attributes by John Resig.</p>




<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@order</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&#39;your_info&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;2. Your Information&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="s1">&#39;First name*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s1">&#39;First name&#39;</span><span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;first_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="s1">&#39;Last name*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s1">&#39;Last name&#39;</span><span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;last_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="s1">&#39;Email*&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s1">&#39;Email&#39;</span><span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;email_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Submit your Order&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;btn btn-primary btn-lg&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s2">&quot;Place order?&quot;</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">blankValidation</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">blankValidation</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">error_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error_name</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error_name</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">error_id</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">error_name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;_error&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">error_message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">error_id</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error_message</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="nx">error_name</span> <span class="o">+</span> <span class="s2">&quot; needed.&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error_class&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error_message</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>We can dynamically call the data attribute for each element.  For example, the error_name value the keyup event(m) will console.log (=> First name, m). The call method allows us to refactor all of our keyup event listeners into one method.  The call method as defined by the Mozilla guide "calls a function with a given this value and arguments provided individually."</p>


<p>h/t Dan Porter</p>




<p>Reference</p>


<ul>
  <li><a href='http://yehudakatz.com/2011/08/11/understanding-JavaScript-function-invocation-and-this/'>Understanding JavaScript Function Invocation and this</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call()</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'>Function.prototype.apply()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Your Way to Success]]></title>
    <link href="http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success/"/>
    <updated>2013-10-22T21:36:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success</id>
    <content type="html"><![CDATA[<p>I have been immersed in production codebases for my <a href='fohrcard.com'>Fohr Card</a> and <a href='http://www.fracturedatlas.org/'>Fractured Atlas</a> projects.  At first, it feel initimidating trying to figure out all of the models and related associations.  I have found that a great way to wrap your head around the code base is to create a new branch and test the code.</p>




<p>A good basic set-up is to start unit testing the models.  In order to do this depends on if your codebase is using a relational database or something like Mongoid.</p>




<h3>Relational Databases</h3>


<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>     <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>     <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>     <span class="n">gem</span> <span class="s1">&#39;shoulda-matchers&#39;</span>
</span><span class='line'>     <span class="n">gem</span> <span class="s1">&#39;terminal-notifier-guard&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
    <li>Guard RSpec waits for you to save your files and automatically runs your tests, thereby reducing the time needed to run tests.</li>
    <li>I like the RSpec syntax over Unit Test and Mini Test.</li>
    <li>Factory Girl Rails creates objects for your tests.  This gem deserves its own blog post. </li>
    <li>The Faker Gem is used in conjunction with Factory Girl Rails to create fake data.</li>
    <li>I like to use Shoulda Matchers to test validaitons and associations in the code.  This gem and firing up Rails Console to play with the objects in my testing is the crux to learning a new codebase.</li>
    <li>Some people find Terminal Notifier annoying, but it helps me know if my tests pass when I have Sublime maximized on my 11 inch MacBook Air screen.</li>
</ul>


<p></p>

<h3>Mongoid</h3>


<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;fabrication&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;mongoid-rspec&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;terminal-notifier-guard&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>The gems for Mongoid testing are similar to those used in testing with a relational database.<p>
<ul>
    <li>The Fabrication gem is similar to building objects with Factory Girl, except the documentation website <a href='http://www.fabricationgem.org/'>rocks.</a></li>
    <li>The Mongoid RSpec gem is similar to Shoulda-Matchers</li>
</ul></p>

<p><h3>Gems</h3>
<a href='https://github.com/guard/guard-rspec'>Guard RSpec</a></br>
<a href='https://github.com/rspec/rspec-rails'>RSpec Rails</a></br>
<a href='https://github.com/thoughtbot/factory_girl_rails'>Factory Girl Rails</a></br>
<a href='https://github.com/btelles/faker'>Faker</a></br>
<a href='https://github.com/thoughtbot/shoulda-matchers'>Shoulda Matchers</a></br>
<a href='https://github.com/Springest/terminal-notifier-guard'>Terminal Notifier Guard</a></br>
<a href='https://github.com/paulelliott/fabrication'>Fabrication</a></br>
<a href='https://github.com/evansagge/mongoid-rspec'>Mongoid RSpec</a></br></br></p>

<p><h3>Other Resources</h3>
<p>I found this book invaluable in learning best practices in testing: <a href='https://leanpub.com/everydayrailsrspec'>Everday RSpec</a></br>h/t Victoria Friedman</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Your Password From Scratch]]></title>
    <link href="http://iacutone.github.io/blog/2013/09/07/changing-your-password-from-scratch/"/>
    <updated>2013-09-07T01:08:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/09/07/changing-your-password-from-scratch</id>
    <content type="html"><![CDATA[<p> So say you are using devise and have none of the has_secure_password medthod available to you.  One should learn the bcrypt gem... and needs to abstract some methods in order to parse an encrypted password.  Cool, Bcrypt can do that, as located <a href ='  https://github.com/rails/rails/blob/b965ce361b89ad33a4a4b422f8e564233926c723/activemodel/lib/active_model/secure_password.rb#L42
'>here.</a> Here is my modified code in order to confirm if a new password in order to apply a boolean value to an inputed password.</p>




<figure class='code'><figcaption><span>edit.html.haml lang: ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'> <span class="nt">%li</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:current_password</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:current_password</span>
</span><span class='line'>      # =&gt; &#39;password&#39;
</span><span class='line'>    <span class="nt">%li</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:new_password</span><span class="p">,</span> <span class="s1">&#39;New Password&#39;</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:new_password</span>
</span><span class='line'>      # =&gt; &#39;new_password&#39;
</span><span class='line'>
</span><span class='line'>  <span class="nc">.buttons</span>
</span><span class='line'>    <span class="nt">%button</span> Save
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">unencrypted_password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">encrypted_password</span><span class="p">)</span> <span class="o">==</span> <span class="n">unencrypted_password</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="n">bcrypt</span> <span class="o">=</span> <span class="o">::</span><span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">encrypted_password</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># creates a bcrypt variable if the encrypted passwors result is true</span>
</span><span class='line'>      <span class="c1"># =&gt; &quot;$2a$10$wgOzLhy84peHUD9wr9UkgOKRpwfls/0h48NYVvKIOdUdbz3XOEpSK&quot; </span>
</span><span class='line'>      <span class="n">password</span> <span class="o">=</span> <span class="o">::</span><span class="no">BCrypt</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">hash_secret</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">salt</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># then salts the new password</span>
</span><span class='line'>      <span class="c1"># =&gt; &quot;$2a$10$VUNoD3xdAp7ytTIsTyH5feY.DNUKA4efIdkcI6ViBQ532o8lyNV/e&quot; </span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">reset_secure_compare</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">encrypted_password</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">encrypted_password</span><span class="p">)</span> <span class="o">!=</span> <span class="n">unencrypted_password</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> <p>You might be wondering what the reset_secure_password method is doing.  Well, it is pulled from the Devise docs and is preventing <a href='http://en.wikipedia.org/wiki/Timing_attack'>timing attacks,</a> when an attacker attempts to compromise an encryption by analyzing the time taken in order to execute the password and salting algorithms.</p></p>

<p>Cool, now I can pass my current_password attribute to make sure it is true.  I need to make a custom <a href='http://edgeguides.rubyonrails.org/active_record_validations.html'>Active Record Validations.</a></p>




<figure class='code'><figcaption><span>user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">correct_password_update_validator</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">current_password</span><span class="p">)</span> <span class="o">==</span> <span class="kp">true</span> <span class="ow">and</span> <span class="n">current_password</span><span class="o">.</span><span class="n">present?</span> <span class="ow">and</span> <span class="n">new_password</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="o">::</span><span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">new_password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>If this validates, encrypted_password on the database returns true.  Now I need validations for events with blank fields (I want nothing to happen), and also, if current_password is blank and new_password and present, visa versa.</p>




<figure class='code'><figcaption><span>user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">validate</span> <span class="ss">:incorrect_password_update_validator</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:update</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:correct_password_update_validator</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:update</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:current_password_present</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:update</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:new_password_present</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:update</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:current_password_true_present</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:update</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_password_true_present</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">current_password</span><span class="p">)</span> <span class="o">==</span> <span class="kp">true</span> <span class="ow">and</span> <span class="n">new_password</span><span class="o">.</span><span class="n">blank?</span> <span class="ow">and</span> <span class="n">current_password</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:new_password</span><span class="p">,</span> <span class="s2">&quot; needs to be filled out.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_password_present</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">current_password</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span> <span class="ow">and</span> <span class="n">new_password</span><span class="o">.</span><span class="n">present?</span> <span class="ow">and</span> <span class="n">current_password</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:current_password</span><span class="p">,</span> <span class="s2">&quot; needs to be filled out.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_password_present</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">current_password</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span> <span class="ow">and</span> <span class="n">new_password</span><span class="o">.</span><span class="n">blank?</span> <span class="ow">and</span> <span class="n">current_password</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:new_password</span><span class="p">,</span> <span class="s2">&quot; needs to be filled out.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">incorrect_password_update_validator</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">current_password</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span> <span class="ow">and</span> <span class="n">current_password</span><span class="o">.</span><span class="n">present?</span> <span class="ow">and</span> <span class="n">new_password</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:current_password</span><span class="p">,</span> <span class="s2">&quot; does not match.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reset_secure_compare</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">blank?</span> <span class="o">||</span> <span class="n">b</span><span class="o">.</span><span class="n">blank?</span> <span class="o">||</span> <span class="n">a</span><span class="o">.</span><span class="n">bytesize</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="n">bytesize</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">unpack</span> <span class="s2">&quot;C</span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">bytesize</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">each_byte</span> <span class="p">{</span> <span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="n">res</span> <span class="o">|=</span> <span class="n">byte</span> <span class="o">^</span> <span class="n">l</span><span class="o">.</span><span class="n">shift</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>Now, all use cases of the user improperly editing the form result in false and a validation error occurs.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep and Scan Methods With Regular Expressions in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby/"/>
    <updated>2013-08-22T18:56:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby</id>
    <content type="html"><![CDATA[<p>I am creating an app to provide food cart locations in Manhattan.  <a href='https://github.com/iacutone/food-truck'>Here</a> is the code.  Food carts generally post their locations on Twitter; in order to create latitude and longitude coordinates, I needed to parse tweets.  This is where scan and grep play their role, to match elements in a tweet string.  Let's say this is our tweet: "53rd and park. Ready by 11!"  This string is database column in my locations model.</p>




<p>Code for scan method.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">tweet</span> <span class="o">=</span> <span class="s2">&quot;53rd and park. Ready by 11!&quot;</span>
</span><span class='line'>  <span class="n">tweet</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/53/</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; [&quot;53&quot;] </span>
</span><span class='line'>  <span class="n">tweet</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/Park/i</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; [&quot;park&quot;]</span>
</span></code></pre></td></tr></table></div></figure>




<p>The scan method takes a string as an input.  Also, the i is used in the regular expression in order to make it case insensitive.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">tweet</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/Park/</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#  =&gt; [] </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Code for grep method.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">tweet</span> <span class="o">=</span> <span class="s2">&quot;53rd and park. Ready by 11!&quot;</span>
</span><span class='line'>  <span class="n">tweet_array</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'>  <span class="c1"># =&gt; [&quot;53rd&quot;, &quot;and&quot;, &quot;park.&quot;, &quot;Ready&quot;, &quot;by&quot;, &quot;11!&quot;] </span>
</span><span class='line'>  <span class="n">tweet_array</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/53/</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; [&quot;53rd&quot;]</span>
</span><span class='line'>  <span class="n">tweet_array</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/Park/i</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; [&quot;park.&quot;]</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>The grep method takes an array as an input, so use the string split method to turn it into an array seperated by commas.  Also, the regular expression matches the entire string.  The grep method seems to be more suited as an alternative for the select and map methods.  <a href='http://zigzag.github.io/2010/03/31/grep-in-ruby----a-powerful-enumerable-method.html'>This</a> blog post goes into further detail explaining more cases to use the grep method over more familiar methods.<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hiding Multiple Checkboxes With JQuery]]></title>
    <link href="http://iacutone.github.io/blog/2013/08/15/adventures-in-jquery/"/>
    <updated>2013-08-15T21:09:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/08/15/adventures-in-jquery</id>
    <content type="html"><![CDATA[<p>I have been developing a <a href='https://github.com/iacutone/new-quiz'>quiz app</a> for practice with a more complex schema interface.  I wanted to dive deeper into CoffeScript and found the opportunity while trying to figure out how a student can add an answer to a given quiz.  If a checkbox for a given answer is checked, I wanted the remaining checkboxes to disappear.  Also, if the student checked the incorrect box, the browser should render all checkboxes again.  Here is my <a href='https://gist.github.com/iacutone/c28e8fa1324f82b508e0'>code.</a></p>




<figure class='code'><figcaption><span>questions.js.coffee </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.checker&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">boxes</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;:checkbox:checked&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">nboxes</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;:checkbox:not(:checked)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">boxes</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.checker_label&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">nboxes</span><span class="p">.</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">boxes</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.checker_label&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">nboxes</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<p>... and the view</p>




<figure class='code'><figcaption><span>_form.html.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Quiz</span><span class="p">:</span>
</span><span class='line'><span class="o">=</span> <span class="vi">@quiz</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@question</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:quiz_id</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="vi">@quiz</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="s2">&quot;What is your question?&quot;</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:content</span>
</span><span class='line'>  <span class="o">%</span><span class="n">br</span>
</span><span class='line'>  <span class="o">%</span><span class="n">fieldset</span>
</span><span class='line'>      <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">fields_for</span> <span class="ss">:answers</span> <span class="k">do</span> <span class="o">|</span><span class="n">builder</span><span class="o">|</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">label</span> <span class="ss">:content</span><span class="p">,</span> <span class="s2">&quot;Answer&quot;</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:content</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">label</span> <span class="s2">&quot;Correct answer?&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;checker_label&#39;</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">check_box</span> <span class="ss">:is_correct</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;checker&#39;</span>
</span><span class='line'>      <span class="o">%</span><span class="n">br</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">link_to_add_fields</span> <span class="s2">&quot;Add an answer choice&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:answers</span>
</span><span class='line'>  <span class="o">%</span><span class="n">br</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq and Carrierwave, Part 3]]></title>
    <link href="http://iacutone.github.io/blog/2013/07/15/sidekiq-and-carrierwave/"/>
    <updated>2013-07-15T20:44:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/07/15/sidekiq-and-carrierwave</id>
    <content type="html"><![CDATA[<p>I decided to use the <a href='https://github.com/lardawge/carrierwave_backgrounder'>Carrierwave Backgrounder Gem</a> in order to asynchronously upload photos to Amazon S3.  This is a different gem than the one Ryan Bates uses in his Railscast.  I was having difficulty implimenting the <a href='https://github.com/dwilkie/carrierwave_direct'>Carrierwave Direct Gem</a>  However, the Backgrounder Gem works great! This is the last installment of the three part series on uploading photos.</p>




<p>This is the final version of the avatar_uploader.rb file.  Just add line 3, which is in the Backgrounder documentaion.</p>




<figure class='code'><figcaption><span>avatar_uploader.rb lang: ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># include CarrierWaveDirect::Uploader</span>
</span><span class='line'>  <span class="kp">include</span> <span class="o">::</span><span class="no">CarrierWave</span><span class="o">::</span><span class="no">Backgrounder</span><span class="o">::</span><span class="no">Delay</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include RMagick or MiniMagick support:</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">RMagick</span>
</span><span class='line'>  <span class="c1"># include CarrierWave::MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include the Sprockets helpers for Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">RailsHelper</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">IsolatedHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Choose what kind of storage to use for this uploader:</span>
</span><span class='line'>  <span class="c1"># storage :file</span>
</span><span class='line'>  <span class="n">storage</span> <span class="ss">:fog</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">MimeTypes</span>
</span><span class='line'>  <span class="n">process</span> <span class="ss">:set_content_type</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the directory where uploaded files will be stored.</span>
</span><span class='line'>  <span class="c1"># This is a sensible default for uploaders that are meant to be mounted:</span>
</span><span class='line'>  <span class="c1"># def store_dir</span>
</span><span class='line'>  <span class="c1">#   &quot;uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provide a default URL as a default if there hasn&#39;t been a file uploaded:</span>
</span><span class='line'>  <span class="c1"># def default_url</span>
</span><span class='line'>  <span class="c1">#   # For Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="c1">#   # asset_path(&quot;fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;))</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   &quot;/images/fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Process files as they are uploaded:</span>
</span><span class='line'>  <span class="c1"># process :scale =&gt; [200, 300]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># def scale(width, height)</span>
</span><span class='line'>  <span class="c1">#   # do something</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create different versions of your uploaded files:</span>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:profile</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Add a white list of extensions which are allowed to be uploaded.</span>
</span><span class='line'>  <span class="c1"># For images you might use something like this:</span>
</span><span class='line'>  <span class="c1"># def extension_white_list</span>
</span><span class='line'>  <span class="c1">#   %w(jpg jpeg gif png)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the filename of the uploaded files:</span>
</span><span class='line'>  <span class="c1"># Avoid using model.id or version_name here, see uploader/store.rb for details.</span>
</span><span class='line'>  <span class="c1"># def filename</span>
</span><span class='line'>  <span class="c1">#   &quot;something.jpg&quot; if original_filename</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>Also, add this code to your model.<p></p>

<p><figure class='code'><figcaption><span>profile.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">mount_uploader</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="no">AvatarUploader</span>
</span><span class='line'>  <span class="n">process_in_background</span> <span class="ss">:avatar</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>Following the install instructions, this file is created in the initializers directory.<p></p>

<p><figure class='code'><figcaption><span>initializers/carrierwave_backgrounder.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">Backgrounder</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># c.backend :delayed_job, queue: :carrierwave</span>
</span><span class='line'>    <span class="c1"># c.backend :resque, queue: :carrierwave</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">backend</span> <span class="ss">:sidekiq</span><span class="p">,</span> <span class="ss">queue</span><span class="p">:</span> <span class="ss">:carrierwave</span>
</span><span class='line'>    <span class="c1"># c.backend :girl_friday, queue: :carrierwave</span>
</span><span class='line'>    <span class="c1"># c.backend :qu, queue: :carrierwave</span>
</span><span class='line'>    <span class="c1"># c.backend :qc</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>Then boot up Sidekiq to listen for jobs with sidekiq -q carrierwave command in your terminal.  You might need to start your Redis server with the command redis-server.  Your background worker should now asynchronously process background jobs!</p></p>

<p><p>Sidekiq also has a cool interface to show what workers are up, how many successes and failures there have been and some other neat features.  It is real easy to set up.  First add the following code to your Gemfile.</p></p>

<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">gem</span> <span class="s1">&#39;slim&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.1.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>Then create this route with the require line before the beginning of the block.</p></p>

<p><figure class='code'><figcaption><span>routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="nb">require</span> <span class="s1">&#39;sidekiq/web&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mount</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Web</span> <span class="o">=&gt;</span> <span class="s1">&#39;/sidekiq&#39;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>I really like this gem and recommend it to anyone trying to run background processes to upload pictures via Carrierwave.</p></p>

<p><p>h/t Blake Johnson</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gon Gem]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/30/gon-gem/"/>
    <updated>2013-06-30T00:04:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/30/gon-gem</id>
    <content type="html"><![CDATA[<p>I ran into difficulties trying to find a way to implement jQuery in a modal.  It is not possible to use remote: true in a form_tag with Twitter Bootstrap.  I successfully used the <a href='https://github.com/gazay/gon'>Gon Gem</a> in order to remove elements from the DOM when an instance variable reached a certain number.  If you find yourself in the position of needing to remove elements from a modal, this gem seems to be the way to go.</p>




<figure class='code'><figcaption><span>user_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>        <span class="vi">@day_one_counter</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>        <span class="vi">@day_one_counter</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:time1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#@day_one_counter outputs an array of elements from the :time1 column. =&gt; [&quot;11:00&quot;, &quot;11:00&quot;, nil, nil, nil]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="vi">@day_one_counter</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>          <span class="n">b</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#the block increments the key/value pairs in the instantiated Hash. =&gt; {&quot;11:00&quot;=&gt;2, nil=&gt;3}</span>
</span><span class='line'>
</span><span class='line'>        <span class="vi">@time1</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;11:00&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">gon</span><span class="o">.</span><span class="n">time1</span> <span class="o">=</span> <span class="vi">@time1</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#@time1 pulls out the value of the pair =&gt; 2</span>
</span><span class='line'>        <span class="c1">#gon.time1 =&gt; 2, in order to use the @time1 instance variable in users.js</span>
</span><span class='line'>
</span><span class='line'>        <span class="vi">@time2</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;11:20&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">gon</span><span class="o">.</span><span class="n">time2</span> <span class="o">=</span> <span class="vi">@time2</span>
</span><span class='line'>
</span><span class='line'>        <span class="vi">@time3</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;11:40&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">gon</span><span class="o">.</span><span class="n">time3</span> <span class="o">=</span> <span class="vi">@time3</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:time</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>This is a conintuation of the Pluck Method from my last blog post.  For an overview of what is happening, read the comments provided above.  With the gone.time1 variable, I can now use jQuery in my users.js file in order to remove elements from the DOM that go over a given number, in this case 5.</p>




<figure class='code'><figcaption><span>users.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">time1</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.wrapper1&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">time2</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.wrapper2&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>...and the form</p>




<figure class='code'><figcaption><span>_time1.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="sx">%= form_for @user do |f| %&gt;</span>
</span><span class='line'><span class="sx">     &lt;div class=</span><span class="s1">&#39;wrapper1&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;pad&#39;</span><span class="o">&gt;</span><span class="mi">11</span><span class="p">:</span><span class="mo">00</span> <span class="n">A</span><span class="o">.</span><span class="n">M</span><span class="o">.</span> <span class="o">&lt;</span><span class="sx">%= f.radio_button(:time1, &#39;11:00&#39;) %&gt;&lt;br /&gt;&lt;%=</span> <span class="mi">5</span> <span class="o">-</span> <span class="vi">@time1</span> <span class="k">unless</span> <span class="vi">@time1</span> <span class="o">==</span> <span class="kp">nil</span> <span class="sx">%&gt; spots remaining.&lt;/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;wrapper2&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;pad&#39;</span><span class="o">&gt;</span><span class="mi">11</span><span class="p">:</span><span class="mi">20</span> <span class="n">A</span><span class="o">.</span><span class="n">M</span><span class="o">.</span> <span class="o">&lt;</span><span class="sx">%= f.radio_button(:time1, &#39;11:20&#39;) %&gt;&lt;br /&gt;&lt;%=</span> <span class="mi">5</span> <span class="o">-</span> <span class="vi">@time2</span> <span class="k">unless</span> <span class="vi">@time2</span> <span class="o">==</span> <span class="kp">nil</span> <span class="sx">%&gt; spots remaining.&lt;/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;wrapper&#39;</span><span class="o">&gt;&lt;</span><span class="sx">%= f.radio_button(:time1, &#39;No time.&#39;) %&gt;  Interested but not available during these times. Please inform me of future conversation opportunities.&lt;br /&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="sx"> &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:day</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="s1">&#39;July 10&#39;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;button class=&quot;btn btn-inverse&quot; type=&quot;submit&quot;class=&quot;actions&quot;&gt;</span><span class="no">Submit</span><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span><span class='line'><span class="sr"> &lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Since the @time1 instance variable and therefore, gon.time1 are saved after my create action, the applicable time is > 4 if I want a total of 5 elements for a particular time on my :time1 column.  The next time the modal is visited, the element will be removed!</p>




<p>I am so excited I found this gem and got my modal to work correctly! Also, a thanks for Railscast for the tutorial on the gem.</p>




<p><a href='http://railscasts.com/episodes/324-passing-data-to-javascript'>Passing Data to Javascript</a></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pluck Method in Active Record]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/23/pluck-method-in-active-record/"/>
    <updated>2013-06-23T01:59:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/23/pluck-method-in-active-record</id>
    <content type="html"><![CDATA[<p>The past few days, I have been building a database to store some information for my friend Shari, a Peace Corps recruiter.  The database includes, a name, email and phone number.  Things got tricky building a date/time models and validations.  Every given time has six time slots for a user to sign up.  My conclusion to this problem was to create a different database column for every given time slot.  Then, I used the <a href='http://apidock.com/rails/ActiveRecord/Calculations/pluck'>pluck method</a> on my Active Record database in order to turn all of my time columns into strings in an array.  However, in Rails 3, pluck only excepts one column to turn into an array.  This feature is being changed in Rails 4 according to <a href ='http://meltingice.net/2013/06/11/pluck-multiple-columns-rails/'>this</a> blog post where he describes how to tamper with the the Active Record library or create a module to provide a pluck_all method for a Rails 3 application.  I implemented this code, and was returned an array of hashes which did not help my cause.  But this is an interesting concept and it was fun and insightful reading the source code.</p>




<figure class='code'><figcaption><span>users_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@day_one_counter</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@day_one_counter</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:time1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@day_two_counter</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@day_two_counter</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:time2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@day_one_counter</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>        <span class="n">b</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@day_two_counter</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>        <span class="n">c</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@time1</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;11:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time2</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;11:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time3</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;12:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time4</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;12:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time5</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;12:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time6</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;12:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time7</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;1:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time8</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;1:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time9</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;1:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time10</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;1:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time11</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;5:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time12</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;5:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time13</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;5:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time14</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;5:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time15</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;6:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time16</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;6:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time17</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;6:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time18</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;6:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time19</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;7:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time20</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="s2">&quot;7:15&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@time21</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;11:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time22</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;11:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time23</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;12:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time24</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;12:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time25</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;12:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time26</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;12:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time27</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;1:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time28</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;1:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time29</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;1:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time30</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;1:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time31</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;5:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time32</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;5:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time33</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;5:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time34</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;5:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time35</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;6:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time36</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;6:15&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time37</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;6:30&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time38</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;6:45&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time39</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;7:00&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@time40</span> <span class="o">=</span> <span class="n">c</span><span class="o">[</span><span class="s2">&quot;7:15&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># respond_to do |format|</span>
</span><span class='line'>      <span class="c1">#   format.html</span>
</span><span class='line'>      <span class="c1">#   format.js</span>
</span><span class='line'>      <span class="c1"># end   </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:time</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>This code gets really cumbersome the more time columns I add, so my next step is to DRY this shit up.  But hell, it works and is going to make my friend's life easier, yay! for technology.</p>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Impress.js With Rails]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/21/using-impress-dot-js-with-rails/"/>
    <updated>2013-06-21T13:13:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/21/using-impress-dot-js-with-rails</id>
    <content type="html"><![CDATA[<p>I recently had an interview at an awesome creative agency, <a href='www.canvas.is'>Canvas</a> and wanted to show them something unique in order to make me stand out.  I decided to build a thank you card with <a href='www.github.com/bartaz/impress.js'>Impress.js.</a>  <a href='http://powerful-woodland-7328.herokuapp.com'> This</a> is the thank you card I sent to their CTO.  I enjoyed playing with Impress.js and will definitely incorporate it into many more applications in the future.  However, there is not much documentation about how to get Impress to play nicely in a Rails app.  The app was breaking in production, but working in development.  The code following the impress.js file below specifies where to load the Javascript.</p>




<figure class='code'><figcaption><span>app/assets/javascripts/impress.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * impress.js</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * impress.js is a presentation tool based on the power of CSS3 transforms and transitions</span>
</span><span class='line'><span class="cm"> * in modern browsers and inspired by the idea behind prezi.com.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Copyright 2011-2012 Bartek Szopka (@bartaz)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Released under the MIT and GPL Licenses.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * ------------------------------------------------</span>
</span><span class='line'><span class="cm"> *  author:  Bartek Szopka</span>
</span><span class='line'><span class="cm"> *  version: 0.5.3</span>
</span><span class='line'><span class="cm"> *  url:     http://bartaz.github.com/impress.js/</span>
</span><span class='line'><span class="cm"> *  source:  http://github.com/bartaz/impress.js/</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*jshint bitwise:true, curly:true, eqeqeq:true, forin:true, latedef:true, newcap:true,</span>
</span><span class='line'><span class="cm">         noarg:true, noempty:true, undef:true, strict:true, browser:true */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You are one of those who like to know how thing work inside?</span>
</span><span class='line'><span class="c1">// Let me show you the cogs that make impress.js run...</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nb">window</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HELPER FUNCTIONS</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `pfx` is a function that takes a standard CSS property name as a parameter</span>
</span><span class='line'>    <span class="c1">// and returns it&#39;s prefixed version valid for current browser it runs in.</span>
</span><span class='line'>    <span class="c1">// The code is heavily inspired by Modernizr http://www.modernizr.com/</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pfx</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">style</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;dummy&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">prefixes</span> <span class="o">=</span> <span class="s1">&#39;Webkit Moz O ms Khtml&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">memory</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">prop</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">memory</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">]</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">ucProp</span>  <span class="o">=</span> <span class="nx">prop</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">prop</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>                    <span class="nx">props</span>   <span class="o">=</span> <span class="p">(</span><span class="nx">prop</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">prefixes</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">ucProp</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ucProp</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">memory</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">props</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="nx">style</span><span class="p">[</span> <span class="nx">props</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">memory</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">props</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">memory</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `arraify` takes an array-like object and turns it into real Array</span>
</span><span class='line'>    <span class="c1">// to make all the Array.prototype goodness available.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arrayify</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">a</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `css` function applies the styles given in `props` object to the element</span>
</span><span class='line'>    <span class="c1">// given as `el`. It runs all property names through `pfx` function to make</span>
</span><span class='line'>    <span class="c1">// sure proper prefixed version of the property is used.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">css</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">props</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">pkey</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">props</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">props</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">pkey</span> <span class="o">=</span> <span class="nx">pfx</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="nx">pkey</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">pkey</span><span class="p">]</span> <span class="o">=</span> <span class="nx">props</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">el</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `toNumber` takes a value given as `numeric` parameter and tries to turn</span>
</span><span class='line'>    <span class="c1">// it into a number. If it is not possible it returns 0 (or other value</span>
</span><span class='line'>    <span class="c1">// given as `fallback`).</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">toNumber</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">numeric</span><span class="p">,</span> <span class="nx">fallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">numeric</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="nx">fallback</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">numeric</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `byId` returns element with given `id` - you probably have guessed that ;)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byId</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">id</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `$` returns first element for given CSS `selector` in the `context` of</span>
</span><span class='line'>    <span class="c1">// the given element or whole document.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="nb">document</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `$$` return an array of elements for given CSS `selector` in the `context` of</span>
</span><span class='line'>    <span class="c1">// the given element or whole document.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$$</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="nb">document</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">arrayify</span><span class="p">(</span> <span class="nx">context</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `triggerEvent` builds a custom DOM event with given `eventName` and `detail` data</span>
</span><span class='line'>    <span class="c1">// and triggers it on element given as `el`.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">triggerEvent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">detail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">event</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s2">&quot;CustomEvent&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">event</span><span class="p">.</span><span class="nx">initCustomEvent</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">detail</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `translate` builds a translate transform string for given data.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">translate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">t</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot; translate3d(&quot;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;px,&quot;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s2">&quot;px,&quot;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">z</span> <span class="o">+</span> <span class="s2">&quot;px) &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `rotate` builds a rotate transform string for given data.</span>
</span><span class='line'>    <span class="c1">// By default the rotations are in X Y Z order that can be reverted by passing `true`</span>
</span><span class='line'>    <span class="c1">// as second parameter.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rotate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">revert</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rX</span> <span class="o">=</span> <span class="s2">&quot; rotateX(&quot;</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;deg) &quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">rY</span> <span class="o">=</span> <span class="s2">&quot; rotateY(&quot;</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s2">&quot;deg) &quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">rZ</span> <span class="o">=</span> <span class="s2">&quot; rotateZ(&quot;</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">z</span> <span class="o">+</span> <span class="s2">&quot;deg) &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">revert</span> <span class="o">?</span> <span class="nx">rZ</span><span class="o">+</span><span class="nx">rY</span><span class="o">+</span><span class="nx">rX</span> <span class="o">:</span> <span class="nx">rX</span><span class="o">+</span><span class="nx">rY</span><span class="o">+</span><span class="nx">rZ</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `scale` builds a scale transform string for given data.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">scale</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">s</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot; scale(&quot;</span> <span class="o">+</span> <span class="nx">s</span> <span class="o">+</span> <span class="s2">&quot;) &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `perspective` builds a perspective transform string for given data.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">perspective</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">p</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot; perspective(&quot;</span> <span class="o">+</span> <span class="nx">p</span> <span class="o">+</span> <span class="s2">&quot;px) &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `getElementFromHash` returns an element located by id from hash part of</span>
</span><span class='line'>    <span class="c1">// window location.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">getElementFromHash</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// get id from url # by removing `#` or `#/` from the beginning,</span>
</span><span class='line'>        <span class="c1">// so both &quot;fallback&quot; `#slide-id` and &quot;enhanced&quot; `#/slide-id` will work</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">byId</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^#\/?/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// `computeWindowScale` counts the scale factor between window size and size</span>
</span><span class='line'>    <span class="c1">// defined for the presentation in the config.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">computeWindowScale</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">hScale</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="o">/</span> <span class="nx">config</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">wScale</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nx">config</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">scale</span> <span class="o">=</span> <span class="nx">hScale</span> <span class="o">&gt;</span> <span class="nx">wScale</span> <span class="o">?</span> <span class="nx">wScale</span> <span class="o">:</span> <span class="nx">hScale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">maxScale</span> <span class="o">&amp;&amp;</span> <span class="nx">scale</span> <span class="o">&gt;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">maxScale</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scale</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">maxScale</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">minScale</span> <span class="o">&amp;&amp;</span> <span class="nx">scale</span> <span class="o">&lt;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">minScale</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scale</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">minScale</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">scale</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CHECK SUPPORT</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ua</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">impressSupported</span> <span class="o">=</span>
</span><span class='line'>                          <span class="c1">// browser should support CSS 3D transtorms </span>
</span><span class='line'>                           <span class="p">(</span> <span class="nx">pfx</span><span class="p">(</span><span class="s2">&quot;perspective&quot;</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>
</span><span class='line'>                          <span class="c1">// and `classList` and `dataset` APIs</span>
</span><span class='line'>                           <span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                           <span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">dataset</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>
</span><span class='line'>                          <span class="c1">// but some mobile devices need to be blacklisted,</span>
</span><span class='line'>                          <span class="c1">// because their CSS 3D support or hardware is not</span>
</span><span class='line'>                          <span class="c1">// good enough to run impress.js properly, sorry...</span>
</span><span class='line'>                           <span class="p">(</span> <span class="nx">ua</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/(iphone)|(ipod)|(android)/</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">impressSupported</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// we can&#39;t be sure that `classList` is supported</span>
</span><span class='line'>        <span class="nx">body</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s2">&quot; impress-not-supported &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;impress-not-supported&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;impress-supported&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// GLOBALS AND DEFAULTS</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This is were the root elements of all impress.js instances will be kept.</span>
</span><span class='line'>    <span class="c1">// Yes, this means you can have more than one instance on a page, but I&#39;m not</span>
</span><span class='line'>    <span class="c1">// sure if it makes any sense in practice ;)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">roots</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// some default config values.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">width</span><span class="o">:</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span><span class="o">:</span> <span class="mi">768</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">maxScale</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">minScale</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">perspective</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">transitionDuration</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// it&#39;s just an empty function ... and a useless comment.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// IMPRESS.JS API</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And that&#39;s where interesting things will start to happen.</span>
</span><span class='line'>    <span class="c1">// It&#39;s the core `impress` function that returns the impress.js API</span>
</span><span class='line'>    <span class="c1">// for a presentation based on the element with given id (&#39;impress&#39;</span>
</span><span class='line'>    <span class="c1">// by default).</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">impress</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">impress</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">rootId</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If impress.js is not supported by the browser return a dummy API</span>
</span><span class='line'>        <span class="c1">// it may not be a perfect solution but we return early and avoid</span>
</span><span class='line'>        <span class="c1">// running code that may use features not implemented in the browser.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">impressSupported</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">init</span><span class="o">:</span> <span class="nx">empty</span><span class="p">,</span>
</span><span class='line'>                <span class="kr">goto</span><span class="o">:</span> <span class="nx">empty</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">prev</span><span class="o">:</span> <span class="nx">empty</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">next</span><span class="o">:</span> <span class="nx">empty</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">rootId</span> <span class="o">=</span> <span class="nx">rootId</span> <span class="o">||</span> <span class="s2">&quot;impress&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// if given root is already initialized just return the API</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">roots</span><span class="p">[</span><span class="s2">&quot;impress-root-&quot;</span> <span class="o">+</span> <span class="nx">rootId</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">roots</span><span class="p">[</span><span class="s2">&quot;impress-root-&quot;</span> <span class="o">+</span> <span class="nx">rootId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// data of all presentation steps</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stepsData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// element of currently active step</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">activeStep</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// current state (position, rotation and scale) of the presentation</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">currentState</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// array of step elements</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">steps</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// configuration options</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// scale factor of the browser window</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">windowScale</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// root presentation elements</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">byId</span><span class="p">(</span> <span class="nx">rootId</span> <span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// STEP EVENTS</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// There are currently two step events triggered by impress.js</span>
</span><span class='line'>        <span class="c1">// `impress:stepenter` is triggered when the step is shown on the </span>
</span><span class='line'>        <span class="c1">// screen (the transition from the previous one is finished) and</span>
</span><span class='line'>        <span class="c1">// `impress:stepleave` is triggered when the step is left (the</span>
</span><span class='line'>        <span class="c1">// transition to next step just starts).</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// reference to last entered step</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">lastEntered</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `onStepEnter` is called whenever the step element is entered</span>
</span><span class='line'>        <span class="c1">// but the event is triggered only if the step is different than</span>
</span><span class='line'>        <span class="c1">// last entered step.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">onStepEnter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">lastEntered</span> <span class="o">!==</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">triggerEvent</span><span class="p">(</span><span class="nx">step</span><span class="p">,</span> <span class="s2">&quot;impress:stepenter&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">lastEntered</span> <span class="o">=</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `onStepLeave` is called whenever the step element is left</span>
</span><span class='line'>        <span class="c1">// but the event is triggered only if the step is the same as</span>
</span><span class='line'>        <span class="c1">// last entered step.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">onStepLeave</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">lastEntered</span> <span class="o">===</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">triggerEvent</span><span class="p">(</span><span class="nx">step</span><span class="p">,</span> <span class="s2">&quot;impress:stepleave&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">lastEntered</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `initStep` initializes given step element by reading data from its</span>
</span><span class='line'>        <span class="c1">// data attributes and setting correct styles.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">initStep</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">idx</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">dataset</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">step</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">translate</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">x</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span>
</span><span class='line'>                        <span class="nx">y</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span>
</span><span class='line'>                        <span class="nx">z</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">rotate</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">x</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">rotateX</span><span class="p">),</span>
</span><span class='line'>                        <span class="nx">y</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">rotateY</span><span class="p">),</span>
</span><span class='line'>                        <span class="nx">z</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">rotateZ</span> <span class="o">||</span> <span class="nx">data</span><span class="p">.</span><span class="nx">rotate</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">scale</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>                    <span class="nx">el</span><span class="o">:</span> <span class="nx">el</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">id</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">el</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s2">&quot;step-&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">stepsData</span><span class="p">[</span><span class="s2">&quot;impress-&quot;</span> <span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">position</span><span class="o">:</span> <span class="s2">&quot;absolute&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transform</span><span class="o">:</span> <span class="s2">&quot;translate(-50%,-50%)&quot;</span> <span class="o">+</span>
</span><span class='line'>                           <span class="nx">translate</span><span class="p">(</span><span class="nx">step</span><span class="p">.</span><span class="nx">translate</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                           <span class="nx">rotate</span><span class="p">(</span><span class="nx">step</span><span class="p">.</span><span class="nx">rotate</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                           <span class="nx">scale</span><span class="p">(</span><span class="nx">step</span><span class="p">.</span><span class="nx">scale</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">transformStyle</span><span class="o">:</span> <span class="s2">&quot;preserve-3d&quot;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `init` API function that initializes (and runs) the presentation.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">initialized</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// First we set up the viewport for mobile devices.</span>
</span><span class='line'>            <span class="c1">// For some reason iPad goes nuts when it is not done properly.</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">meta</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;meta[name=&#39;viewport&#39;]&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">meta</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="s2">&quot;width=device-width, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">meta</span><span class="p">.</span><span class="nx">parentNode</span> <span class="o">!==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">meta</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;viewport&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">meta</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// initialize configuration object</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">rootData</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">dataset</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">width</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">width</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">height</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">height</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">maxScale</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">maxScale</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">maxScale</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">minScale</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">minScale</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">minScale</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">perspective</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">perspective</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">perspective</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">transitionDuration</span><span class="o">:</span> <span class="nx">toNumber</span><span class="p">(</span> <span class="nx">rootData</span><span class="p">.</span><span class="nx">transitionDuration</span><span class="p">,</span> <span class="nx">defaults</span><span class="p">.</span><span class="nx">transitionDuration</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">windowScale</span> <span class="o">=</span> <span class="nx">computeWindowScale</span><span class="p">(</span> <span class="nx">config</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// wrap steps with &quot;canvas&quot; element</span>
</span><span class='line'>            <span class="nx">arrayify</span><span class="p">(</span> <span class="nx">root</span><span class="p">.</span><span class="nx">childNodes</span> <span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span> <span class="nx">el</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">canvas</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">el</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">canvas</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// set initial styles</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s2">&quot;100%&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">height</span><span class="o">:</span> <span class="s2">&quot;100%&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">overflow</span><span class="o">:</span> <span class="s2">&quot;hidden&quot;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">rootStyles</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">position</span><span class="o">:</span> <span class="s2">&quot;absolute&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transformOrigin</span><span class="o">:</span> <span class="s2">&quot;top left&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transition</span><span class="o">:</span> <span class="s2">&quot;all 0s ease-in-out&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transformStyle</span><span class="o">:</span> <span class="s2">&quot;preserve-3d&quot;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">rootStyles</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">top</span><span class="o">:</span> <span class="s2">&quot;50%&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">left</span><span class="o">:</span> <span class="s2">&quot;50%&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transform</span><span class="o">:</span> <span class="nx">perspective</span><span class="p">(</span> <span class="nx">config</span><span class="p">.</span><span class="nx">perspective</span><span class="o">/</span><span class="nx">windowScale</span> <span class="p">)</span> <span class="o">+</span> <span class="nx">scale</span><span class="p">(</span> <span class="nx">windowScale</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">rootStyles</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;impress-disabled&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;impress-enabled&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// get and init steps</span>
</span><span class='line'>            <span class="nx">steps</span> <span class="o">=</span> <span class="nx">$$</span><span class="p">(</span><span class="s2">&quot;.step&quot;</span><span class="p">,</span> <span class="nx">root</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">steps</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">initStep</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// set a default initial state of the canvas</span>
</span><span class='line'>            <span class="nx">currentState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">translate</span><span class="o">:</span> <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">z</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span>
</span><span class='line'>                <span class="nx">rotate</span><span class="o">:</span>    <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">z</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span>
</span><span class='line'>                <span class="nx">scale</span><span class="o">:</span>     <span class="mi">1</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">triggerEvent</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="s2">&quot;impress:init&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">api</span><span class="o">:</span> <span class="nx">roots</span><span class="p">[</span> <span class="s2">&quot;impress-root-&quot;</span> <span class="o">+</span> <span class="nx">rootId</span> <span class="p">]</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `getStep` is a helper function that returns a step element defined by parameter.</span>
</span><span class='line'>        <span class="c1">// If a number is given, step with index given by the number is returned, if a string</span>
</span><span class='line'>        <span class="c1">// is given step element with such id is returned, if DOM element is given it is returned</span>
</span><span class='line'>        <span class="c1">// if it is a correct step element.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">getStep</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">step</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">step</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="nx">steps</span><span class="p">[</span> <span class="nx">steps</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">step</span><span class="p">]</span> <span class="o">:</span> <span class="nx">steps</span><span class="p">[</span> <span class="nx">step</span> <span class="p">];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">step</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">step</span> <span class="o">=</span> <span class="nx">byId</span><span class="p">(</span><span class="nx">step</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nx">step</span> <span class="o">&amp;&amp;</span> <span class="nx">step</span><span class="p">.</span><span class="nx">id</span> <span class="o">&amp;&amp;</span> <span class="nx">stepsData</span><span class="p">[</span><span class="s2">&quot;impress-&quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">id</span><span class="p">])</span> <span class="o">?</span> <span class="nx">step</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// used to reset timeout for `impress:stepenter` event</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stepEnterTimeout</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `goto` API function that moves to step given with `el` parameter (by index, id or element),</span>
</span><span class='line'>        <span class="c1">// with a transition `duration` optionally given as second parameter.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="kr">goto</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">duration</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">initialized</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">getStep</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// presentation not initialized or given element is not a step</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Sometimes it&#39;s possible to trigger focus on first link with some keyboard action.</span>
</span><span class='line'>            <span class="c1">// Browser in such a case tries to scroll the page to make this element visible</span>
</span><span class='line'>            <span class="c1">// (even that body overflow is set to hidden) and it breaks our careful positioning.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// So, as a lousy (and lazy) workaround we will make the page scroll back to the top</span>
</span><span class='line'>            <span class="c1">// whenever slide is selected</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// If you are reading this and know any better way to handle it, I&#39;ll be glad to hear about it!</span>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">scrollTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="nx">stepsData</span><span class="p">[</span><span class="s2">&quot;impress-&quot;</span> <span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">activeStep</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">activeStep</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;active&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;impress-on-&quot;</span> <span class="o">+</span> <span class="nx">activeStep</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">el</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;active&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;impress-on-&quot;</span> <span class="o">+</span> <span class="nx">el</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// compute target state of the canvas based on given step</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">rotate</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">x</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">y</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">z</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">z</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="nx">translate</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">x</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">y</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">z</span><span class="o">:</span> <span class="o">-</span><span class="nx">step</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">z</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="nx">scale</span><span class="o">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="nx">step</span><span class="p">.</span><span class="nx">scale</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Check if the transition is zooming in or not.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// This information is used to alter the transition style:</span>
</span><span class='line'>            <span class="c1">// when we are zooming in - we start with move and rotate transition</span>
</span><span class='line'>            <span class="c1">// and the scaling is delayed, but when we are zooming out we start</span>
</span><span class='line'>            <span class="c1">// with scaling down and move and rotation are delayed.</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">zoomin</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">scale</span> <span class="o">&gt;=</span> <span class="nx">currentState</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">duration</span> <span class="o">=</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">transitionDuration</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">delay</span> <span class="o">=</span> <span class="p">(</span><span class="nx">duration</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// if the same step is re-selected, force computing window scaling,</span>
</span><span class='line'>            <span class="c1">// because it is likely to be caused by window resize</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nx">activeStep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">windowScale</span> <span class="o">=</span> <span class="nx">computeWindowScale</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">targetScale</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">scale</span> <span class="o">*</span> <span class="nx">windowScale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// trigger leave of currently active element (if it&#39;s not the same step again)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">activeStep</span> <span class="o">&amp;&amp;</span> <span class="nx">activeStep</span> <span class="o">!==</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">onStepLeave</span><span class="p">(</span><span class="nx">activeStep</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Now we alter transforms of `root` and `canvas` to trigger transitions.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// And here is why there are two elements: `root` and `canvas` - they are</span>
</span><span class='line'>            <span class="c1">// being animated separately:</span>
</span><span class='line'>            <span class="c1">// `root` is used for scaling and `canvas` for translate and rotations.</span>
</span><span class='line'>            <span class="c1">// Transitions on them are triggered with different delays (to make</span>
</span><span class='line'>            <span class="c1">// visually nice and &#39;natural&#39; looking transitions), so we need to know</span>
</span><span class='line'>            <span class="c1">// that both of them are finished.</span>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// to keep the perspective look similar for different scales</span>
</span><span class='line'>                <span class="c1">// we need to &#39;scale&#39; the perspective, too</span>
</span><span class='line'>                <span class="nx">transform</span><span class="o">:</span> <span class="nx">perspective</span><span class="p">(</span> <span class="nx">config</span><span class="p">.</span><span class="nx">perspective</span> <span class="o">/</span> <span class="nx">targetScale</span> <span class="p">)</span> <span class="o">+</span> <span class="nx">scale</span><span class="p">(</span> <span class="nx">targetScale</span> <span class="p">),</span>
</span><span class='line'>                <span class="nx">transitionDuration</span><span class="o">:</span> <span class="nx">duration</span> <span class="o">+</span> <span class="s2">&quot;ms&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transitionDelay</span><span class="o">:</span> <span class="p">(</span><span class="nx">zoomin</span> <span class="o">?</span> <span class="nx">delay</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;ms&quot;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">css</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">transform</span><span class="o">:</span> <span class="nx">rotate</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">rotate</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="o">+</span> <span class="nx">translate</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">translate</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">transitionDuration</span><span class="o">:</span> <span class="nx">duration</span> <span class="o">+</span> <span class="s2">&quot;ms&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">transitionDelay</span><span class="o">:</span> <span class="p">(</span><span class="nx">zoomin</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nx">delay</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;ms&quot;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Here is a tricky part...</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// If there is no change in scale or no change in rotation and translation, it means there was actually</span>
</span><span class='line'>            <span class="c1">// no delay - because there was no transition on `root` or `canvas` elements.</span>
</span><span class='line'>            <span class="c1">// We want to trigger `impress:stepenter` event in the correct moment, so here we compare the current</span>
</span><span class='line'>            <span class="c1">// and target values to check if delay should be taken into account.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// I know that this `if` statement looks scary, but it&#39;s pretty simple when you know what is going on</span>
</span><span class='line'>            <span class="c1">// - it&#39;s simply comparing all the values.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">currentState</span><span class="p">.</span><span class="nx">scale</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">scale</span> <span class="o">||</span>
</span><span class='line'>                <span class="p">(</span><span class="nx">currentState</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">currentState</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">y</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                 <span class="nx">currentState</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">z</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">rotate</span><span class="p">.</span><span class="nx">z</span> <span class="o">&amp;&amp;</span> <span class="nx">currentState</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                 <span class="nx">currentState</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">y</span> <span class="o">&amp;&amp;</span> <span class="nx">currentState</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">z</span> <span class="o">===</span> <span class="nx">target</span><span class="p">.</span><span class="nx">translate</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// store current state</span>
</span><span class='line'>            <span class="nx">currentState</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">activeStep</span> <span class="o">=</span> <span class="nx">el</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// And here is where we trigger `impress:stepenter` event.</span>
</span><span class='line'>            <span class="c1">// We simply set up a timeout to fire it taking transition duration (and possible delay) into account.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// I really wanted to make it in more elegant way. The `transitionend` event seemed to be the best way</span>
</span><span class='line'>            <span class="c1">// to do it, but the fact that I&#39;m using transitions on two separate elements and that the `transitionend`</span>
</span><span class='line'>            <span class="c1">// event is only triggered when there was a transition (change in the values) caused some bugs and </span>
</span><span class='line'>            <span class="c1">// made the code really complicated, cause I had to handle all the conditions separately. And it still</span>
</span><span class='line'>            <span class="c1">// needed a `setTimeout` fallback for the situations when there is no transition at all.</span>
</span><span class='line'>            <span class="c1">// So I decided that I&#39;d rather make the code simpler than use shiny new `transitionend`.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// If you want learn something interesting and see how it was done with `transitionend` go back to</span>
</span><span class='line'>            <span class="c1">// version 0.5.2 of impress.js: http://github.com/bartaz/impress.js/blob/0.5.2/js/impress.js</span>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">stepEnterTimeout</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">stepEnterTimeout</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">onStepEnter</span><span class="p">(</span><span class="nx">activeStep</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="nx">duration</span> <span class="o">+</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">el</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `prev` API function goes to previous step (in document order)</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">prev</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">prev</span> <span class="o">=</span> <span class="nx">steps</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">activeStep</span> <span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">prev</span> <span class="o">=</span> <span class="nx">prev</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="nx">steps</span><span class="p">[</span> <span class="nx">prev</span> <span class="p">]</span> <span class="o">:</span> <span class="nx">steps</span><span class="p">[</span> <span class="nx">steps</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="kr">goto</span><span class="p">(</span><span class="nx">prev</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// `next` API function goes to next step (in document order)</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">steps</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">activeStep</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">next</span> <span class="o">=</span> <span class="nx">next</span> <span class="o">&lt;</span> <span class="nx">steps</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">steps</span><span class="p">[</span> <span class="nx">next</span> <span class="p">]</span> <span class="o">:</span> <span class="nx">steps</span><span class="p">[</span> <span class="mi">0</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="kr">goto</span><span class="p">(</span><span class="nx">next</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Adding some useful classes to step elements.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// All the steps that have not been shown yet are given `future` class.</span>
</span><span class='line'>        <span class="c1">// When the step is entered the `future` class is removed and the `present`</span>
</span><span class='line'>        <span class="c1">// class is given. When the step is left `present` class is replaced with</span>
</span><span class='line'>        <span class="c1">// `past` class.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// So every step element is always in one of three possible states:</span>
</span><span class='line'>        <span class="c1">// `future`, `present` and `past`.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// There classes can be used in CSS to style different types of steps.</span>
</span><span class='line'>        <span class="c1">// For example the `present` class can be used to trigger some custom</span>
</span><span class='line'>        <span class="c1">// animations when step is shown.</span>
</span><span class='line'>        <span class="nx">root</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:init&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="c1">// STEP CLASSES</span>
</span><span class='line'>            <span class="nx">steps</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">step</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;future&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">root</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:stepenter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;past&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;future&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;present&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">root</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:stepleave&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&quot;present&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;past&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Adding hash change support.</span>
</span><span class='line'>        <span class="nx">root</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:init&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// last hash detected</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">lastHash</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// `#/step-id` is used instead of `#step-id` to prevent default browser</span>
</span><span class='line'>            <span class="c1">// scrolling to element in hash.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// And it has to be set after animation finishes, because in Chrome it</span>
</span><span class='line'>            <span class="c1">// makes transtion laggy.</span>
</span><span class='line'>            <span class="c1">// BUG: http://code.google.com/p/chromium/issues/detail?id=62820</span>
</span><span class='line'>            <span class="nx">root</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:stepenter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="nx">lastHash</span> <span class="o">=</span> <span class="s2">&quot;#/&quot;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;hashchange&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// When the step is entered hash in the location is updated</span>
</span><span class='line'>                <span class="c1">// (just few lines above from here), so the hash change is </span>
</span><span class='line'>                <span class="c1">// triggered and we would call `goto` again on the same element.</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="c1">// To avoid this we store last entered hash and compare.</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">!==</span> <span class="nx">lastHash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kr">goto</span><span class="p">(</span> <span class="nx">getElementFromHash</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// START </span>
</span><span class='line'>            <span class="c1">// by selecting step defined in url or first step of the presentation</span>
</span><span class='line'>            <span class="kr">goto</span><span class="p">(</span><span class="nx">getElementFromHash</span><span class="p">()</span> <span class="o">||</span> <span class="nx">steps</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;impress-disabled&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// store and return API for given impress.js root element</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">roots</span><span class="p">[</span> <span class="s2">&quot;impress-root-&quot;</span> <span class="o">+</span> <span class="nx">rootId</span> <span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">init</span><span class="o">:</span> <span class="nx">init</span><span class="p">,</span>
</span><span class='line'>            <span class="kr">goto</span><span class="o">:</span> <span class="kr">goto</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">next</span><span class="o">:</span> <span class="nx">next</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">prev</span><span class="o">:</span> <span class="nx">prev</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// flag that can be used in JS to check if browser have passed the support test</span>
</span><span class='line'>    <span class="nx">impress</span><span class="p">.</span><span class="nx">supported</span> <span class="o">=</span> <span class="nx">impressSupported</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nb">document</span><span class="p">,</span> <span class="nb">window</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NAVIGATION EVENTS</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// As you can see this part is separate from the impress.js core code.</span>
</span><span class='line'><span class="c1">// It&#39;s because these navigation actions only need what impress.js provides with</span>
</span><span class='line'><span class="c1">// its simple API.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// In future I think about moving it to make them optional, move to separate files</span>
</span><span class='line'><span class="c1">// and treat more like a &#39;plugins&#39;.</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nb">window</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// throttling function calls, by Remy Sharp</span>
</span><span class='line'>    <span class="c1">// http://remysharp.com/2010/07/21/throttling-function-calls/</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">throttle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">timer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// wait for impress.js to be initialized</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;impress:init&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Getting API from event data.</span>
</span><span class='line'>        <span class="c1">// So you don&#39;t event need to know what is the id of the root element</span>
</span><span class='line'>        <span class="c1">// or anything. `impress:init` event data gives you everything you </span>
</span><span class='line'>        <span class="c1">// need to control the presentation that was just initialized.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">api</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// KEYBOARD NAVIGATION HANDLERS</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Prevent default keydown action when one of supported key is pressed.</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">||</span> <span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&gt;=</span> <span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&lt;=</span> <span class="mi">34</span> <span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&gt;=</span> <span class="mi">37</span> <span class="o">&amp;&amp;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Trigger impress action (next or prev) on keyup.</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Supported keys are:</span>
</span><span class='line'>        <span class="c1">// [space] - quite common in presentation software to move forward</span>
</span><span class='line'>        <span class="c1">// [up] [right] / [down] [left] - again common and natural addition,</span>
</span><span class='line'>        <span class="c1">// [pgdown] / [pgup] - often triggered by remote controllers,</span>
</span><span class='line'>        <span class="c1">// [tab] - this one is quite controversial, but the reason it ended up on</span>
</span><span class='line'>        <span class="c1">//   this list is quite an interesting story... Remember that strange part</span>
</span><span class='line'>        <span class="c1">//   in the impress.js code where window is scrolled to 0,0 on every presentation</span>
</span><span class='line'>        <span class="c1">//   step, because sometimes browser scrolls viewport because of the focused element?</span>
</span><span class='line'>        <span class="c1">//   Well, the [tab] key by default navigates around focusable elements, so clicking</span>
</span><span class='line'>        <span class="c1">//   it very often caused scrolling to focused element and breaking impress.js</span>
</span><span class='line'>        <span class="c1">//   positioning. I didn&#39;t want to just prevent this default action, so I used [tab]</span>
</span><span class='line'>        <span class="c1">//   as another way to moving to next step... And yes, I know that for the sake of</span>
</span><span class='line'>        <span class="c1">//   consistency I should add [shift+tab] as opposite action...</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keyup&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">||</span> <span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&gt;=</span> <span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&lt;=</span> <span class="mi">34</span> <span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&gt;=</span> <span class="mi">37</span> <span class="o">&amp;&amp;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">switch</span><span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">33</span><span class="o">:</span> <span class="c1">// pg up</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">37</span><span class="o">:</span> <span class="c1">// left</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">38</span><span class="o">:</span> <span class="c1">// up</span>
</span><span class='line'>                             <span class="nx">api</span><span class="p">.</span><span class="nx">prev</span><span class="p">();</span>
</span><span class='line'>                             <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">9</span><span class="o">:</span>  <span class="c1">// tab</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">32</span><span class="o">:</span> <span class="c1">// space</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">34</span><span class="o">:</span> <span class="c1">// pg down</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">39</span><span class="o">:</span> <span class="c1">// right</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">40</span><span class="o">:</span> <span class="c1">// down</span>
</span><span class='line'>                             <span class="nx">api</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'>                             <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// delegated handler for clicking on the links to presentation steps</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// event delegation with &quot;bubbling&quot;</span>
</span><span class='line'>            <span class="c1">// check if event target (or any of its parents is a link)</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">!==</span> <span class="s2">&quot;A&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="p">(</span><span class="nx">target</span> <span class="o">!==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">target</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="s2">&quot;A&quot;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// if it&#39;s a link to presentation step, target this step</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="nx">href</span> <span class="o">&amp;&amp;</span> <span class="nx">href</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;#&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">target</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="nx">href</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">api</span><span class="p">.</span><span class="kr">goto</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">stopImmediatePropagation</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// delegated handler for clicking on step elements</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// find closest step element that is not active</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="s2">&quot;step&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">target</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="s2">&quot;active&quot;</span><span class="p">))</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="p">(</span><span class="nx">target</span> <span class="o">!==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">target</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">api</span><span class="p">.</span><span class="kr">goto</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// touch handler to detect taps on the left and right side of the screen</span>
</span><span class='line'>        <span class="c1">// based on awesome work of @hakimel: https://github.com/hakimel/reveal.js</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;touchstart&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">touches</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clientX</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">result</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">width</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">result</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">prev</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">-</span> <span class="nx">width</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">result</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// rescale presentation when window is resized</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;resize&quot;</span><span class="p">,</span> <span class="nx">throttle</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// force going to active step again, to trigger rescaling</span>
</span><span class='line'>            <span class="nx">api</span><span class="p">.</span><span class="kr">goto</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.step.active&quot;</span><span class="p">),</span> <span class="mi">500</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">250</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nb">document</span><span class="p">,</span> <span class="nb">window</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// THAT&#39;S ALL FOLKS!</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Thanks for reading it all.</span>
</span><span class='line'><span class="c1">// Or thanks for scrolling down and reading the last part.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// I&#39;ve learnt a lot when building impress.js and I hope this code and comments</span>
</span><span class='line'><span class="c1">// will help somebody learn at least some part of it.</span>
</span></code></pre></td></tr></table></div></figure>




<p>Add this to the directory listed above.  At the time of this writing, this is new newest realease of Impress.js.  In order to get Impress and Rails to cooperate, I changed my application.html.erb file to this: </p>




<figure class='code'><figcaption><span>view/layouts/application.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">Thanksyou</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= javascript_include_tag &quot;application&quot; %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= csrf_meta_tags %&gt;</span>
</span><span class='line'><span class="sr">  &lt;link href=&#39;http:/</span><span class="o">/</span><span class="n">fonts</span><span class="o">.</span><span class="n">googleapis</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">css?family</span><span class="o">=</span><span class="no">Questrial</span><span class="s1">&#39; rel=&#39;</span><span class="n">stylesheet</span><span class="s1">&#39; type=&#39;</span><span class="n">text</span><span class="o">/</span><span class="n">css</span><span class="err">&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/head&gt;</span>
</span><span class='line'><span class="sr">&lt;body&gt;</span>
</span><span class='line'><span class="sr"> </span>
</span><span class='line'><span class="sr">&lt;%= yield %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;%= javascript_include_tag &quot;application&quot; %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>That is pretty much it, however I ran into difficulty determining where and when to load the impress.js file.  I tried moving it into several different directories including the index view with both the javascript_include_tag and  the script tag.  I also messed with the load order of the application.js asset pipeline.  After fretting for far too long, I put the file in the correct place and all was well.  I hope this post saves someone whom wants to play with Impress.js time and energy.</p>




<p><p>Also, <a href='https://github.com/bartaz/impress.js/blob/master/index.html'> the tutorial</a> is very well written and worth reading for anyone that wants to use this library.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/18/client-side-validations/"/>
    <updated>2013-06-18T01:29:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/18/client-side-validations</id>
    <content type="html"><![CDATA[<p>The <a href='http://railscasts.com/episodes/263-client-side-validations'>Railscast</a> for the <a href='https://github.com/bcardarella/client_side_validations'>Client Side Validations Gem</a> is very outdated and does not function.  Furthermore, the documentation for the gem did not completely work with my version of Rails, 3.2.13.  The point of this post is to get front end validations to work with Rails 3.2.13.</p>


<p><code>gem &lsquo;client_side_validations&rsquo;</code></p>

<p><code>$ rails g client_side_validations:install</code></p>

<p>The file below is created, but you must uncomment lines 10 through 16 in order to get it to work.</p>




<figure class='code'><figcaption><span>config/initializers/client_side_validations.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ClientSideValidations Initializer</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Uncomment to disable uniqueness validator, possible security issue</span>
</span><span class='line'><span class="c1"># ClientSideValidations::Config.disabled_validators = [:uniqueness]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Uncomment to validate number format with current I18n locale</span>
</span><span class='line'><span class="c1"># ClientSideValidations::Config.number_format_with_locale = true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Uncomment the following block if you want each input field to have the validation messages attached.</span>
</span><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">field_error_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">html_tag</span><span class="p">,</span> <span class="n">instance</span><span class="o">|</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">html_tag</span> <span class="o">=~</span> <span class="sr">/^&lt;label/</span>
</span><span class='line'>    <span class="sx">%{&lt;div class=&quot;field_with_errors&quot;&gt;</span><span class="si">#{</span><span class="n">html_tag</span><span class="si">}</span><span class="sx">&lt;label for=&quot;</span><span class="si">#{</span><span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:tag_id</span><span class="p">)</span><span class="si">}</span><span class="sx">&quot; class=&quot;message&quot;&gt;</span><span class="si">#{</span><span class="n">instance</span><span class="o">.</span><span class="n">error_message</span><span class="o">.</span><span class="n">first</span><span class="si">}</span><span class="sx">&lt;/label&gt;&lt;/div&gt;}</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="sx">%{&lt;div class=&quot;field_with_errors&quot;&gt;</span><span class="si">#{</span><span class="n">html_tag</span><span class="si">}</span><span class="sx">&lt;/div&gt;}</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p><code>//= require rails.validations</code><br />...in applications.js<br />...and the following to your form.</p>




<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for @user, :validate =</span><span class="o">&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>And a little CSS...</p>


<p><br /></p>

<figure class='code'><figcaption><span>application.css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.field_with_errors</span> <span class="nc">.message</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#FFC200</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Your app should now be able to display Rails error messages in line with your form fields.  This is where I began to run into problems, creating a custom validator.</p>


<p><br /></p>

<p>The Github Documentation says to put the following code into app/validators/email_validator.rb</p>


<p><br /></p>

<figure class='code'><figcaption><span>initializers/email_validator.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EmailValidator</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">EachValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">attr_name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">value</span> <span class="o">=~</span> <span class="sr">/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i</span>
</span><span class='line'>      <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attr_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This allows us to assign the validator in the model</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveModel::Validations::HelperMethods</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validates_email</span><span class="p">(</span><span class="o">*</span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>    <span class="n">validates_with</span> <span class="no">EmailValidator</span><span class="p">,</span> <span class="n">_merge_attributes</span><span class="p">(</span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>This did not work for me.  However, creating the email_validator.rb file under the initializers directory did the trick.  I need to ask a Flatiron School compadre why this is.  Follow the rest of the custom validator documentation for awesome validations.  I hope this saves people time while implenting this gem.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon S3, Part 2]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/10/amazon-s3/"/>
    <updated>2013-06-10T15:45:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/10/amazon-s3</id>
    <content type="html"><![CDATA[<p>So we have Carrierwave uploading pictures to our local server.  Perhaps we want the pictures stored on a third party cloud provider.  Amazon S3 and Carrierwave work very well together.  This blog post describes how to upload your pictures to the Amazon S3 cloud.  Again, thanks to Ryan Bates and Railscasts for the great information.</p>




<p>In order to upload files to Amazon S3, we will be using the <a href='https://github.com/fog/fog'>Fog Gem.</a>  The Carrierwave gem handles the Fog interaction with Amazon S3 behind the scenes.</p>




<ul>
    <li>Sign up for an Amazon AWS account.</li>
    <li>Create a S3 bucket to store your files (photos)</li>
    <li>Input your credentials in:</li>
</ul>




<figure class='code'><figcaption><span>initializers/carrierwave.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_credentials</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:provider</span>               <span class="o">=&gt;</span> <span class="s1">&#39;AWS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:aws_access_key_id</span>      <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_ACCESS_KEY_ID&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:aws_secret_access_key</span>  <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span>  <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_S3_BUCKET&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>I put my ENV variables in the <a href='https://github.com/laserlemon/figaro'>Figaro Gem.</a></p>




<p>You also need to modify your code in the avatar_uploader we created in the last blog post to :</p>




<figure class='code'><figcaption><span>avatar_uploader.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># include CarrierWaveDirect::Uploader</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include RMagick or MiniMagick support:</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">RMagick</span>
</span><span class='line'>  <span class="c1"># include CarrierWave::MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include the Sprockets helpers for Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">RailsHelper</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">IsolatedHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Choose what kind of storage to use for this uploader:</span>
</span><span class='line'>  <span class="c1"># storage :file</span>
</span><span class='line'>  <span class="n">storage</span> <span class="ss">:fog</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">MimeTypes</span>
</span><span class='line'>  <span class="n">process</span> <span class="ss">:set_content_type</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the directory where uploaded files will be stored.</span>
</span><span class='line'>  <span class="c1"># This is a sensible default for uploaders that are meant to be mounted:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>    <span class="s2">&quot;uploads/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provide a default URL as a default if there hasn&#39;t been a file uploaded:</span>
</span><span class='line'>  <span class="c1"># def default_url</span>
</span><span class='line'>  <span class="c1">#   # For Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="c1">#   # asset_path(&quot;fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;))</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   &quot;/images/fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Process files as they are uploaded:</span>
</span><span class='line'>  <span class="c1"># process :scale =&gt; [200, 300]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># def scale(width, height)</span>
</span><span class='line'>  <span class="c1">#   # do something</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create different versions of your uploaded files:</span>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:profile</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Add a white list of extensions which are allowed to be uploaded.</span>
</span><span class='line'>  <span class="c1"># For images you might use something like this:</span>
</span><span class='line'>  <span class="c1"># def extension_white_list</span>
</span><span class='line'>  <span class="c1">#   %w(jpg jpeg gif png)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the filename of the uploaded files:</span>
</span><span class='line'>  <span class="c1"># Avoid using model.id or version_name here, see uploader/store.rb for details.</span>
</span><span class='line'>  <span class="c1"># def filename</span>
</span><span class='line'>  <span class="c1">#   &quot;something.jpg&quot; if original_filename</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>That is it.  Your photos are now added to your Amazon S3 bucket!  Just be careful, you only get so much space on the cloud for free.  In the next blog post, I will explain how to increase efficiency with a background task via Sidekiq.</p>


<p><a href='http://railscasts.com/episodes/253-carrierwave-file-uploads'>Carrierwave Railscast</a><br />
<a href='http://railscasts.com/episodes/383-uploading-to-amazon-s3'>Uploading to Amazon S3 Railscast</a><br />
<a href='http://railscasts.com/episodes/366-sidekiq'>Sidekiq Railscast</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carrierwave Gem, Part 1]]></title>
    <link href="http://iacutone.github.io/blog/2013/06/05/amazon-s3/"/>
    <updated>2013-06-05T18:59:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/06/05/amazon-s3</id>
    <content type="html"><![CDATA[<p>I have been developing a CMS for students at the Flatiron School.  Some gems I used for the first time include Sidekiq, Amazon S3, Carrierwave and Fog. This blog post is a walkthrough of how to implement these gems in your own Rails app.  Furthermore, h/t to Ryan Bates of Railscasts for the invaluable information in his videos.  This blog post will be broken down into different parts, implementing Carrierwave is the objective of this post.</p>


<p></p>

<p>The first step is to initiate the <a href='https://github.com/carrierwaveuploader/carrierwave'>Carrierwave Gem</a> in order to upload pictures to the app.  So, the typical steps:</p>




<p>Add 'carrierwave' to your Gemfile</p>


<pre><code>&lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure class='code'&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
</code></pre>

<p></pre></td><td class='code'><pre><code class=''><span class='line'>$ rails g uploader avatar</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
    <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails g migration add_avatar_to_profiles avatar:string</span></code></pre></td></tr></table></div></figure>
<br />
    <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake db:migrate</span></code></pre></td></tr></table></div></figure></p>

<p>Now, our Profile table has an avatar attribute.  An uploader folder was also added to your app route directory named after your attribute name, in this case avatar_uploader.rb.  Here is the code in the file.</p>




<figure class='code'><figcaption><span>avatar_uploader.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># include CarrierWaveDirect::Uploader</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include RMagick or MiniMagick support:</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">RMagick</span>
</span><span class='line'>  <span class="c1"># include CarrierWave::MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include the Sprockets helpers for Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="c1"># include Sprockets::Helpers::RailsHelper</span>
</span><span class='line'>  <span class="c1"># include Sprockets::Helpers::IsolatedHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Choose what kind of storage to use for this uploader:</span>
</span><span class='line'>  <span class="n">storage</span> <span class="ss">:file</span>
</span><span class='line'>  <span class="c1"># storage :fog</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># include CarrierWave::MimeTypes</span>
</span><span class='line'>  <span class="c1"># process :set_content_type</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the directory where uploaded files will be stored.</span>
</span><span class='line'>  <span class="c1"># This is a sensible default for uploaders that are meant to be mounted:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>    <span class="s2">&quot;uploads/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provide a default URL as a default if there hasn&#39;t been a file uploaded:</span>
</span><span class='line'>  <span class="c1"># def default_url</span>
</span><span class='line'>  <span class="c1">#   # For Rails 3.1+ asset pipeline compatibility:</span>
</span><span class='line'>  <span class="c1">#   # asset_path(&quot;fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;))</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   &quot;/images/fallback/&quot; + [version_name, &quot;default.png&quot;].compact.join(&#39;_&#39;)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Process files as they are uploaded:</span>
</span><span class='line'>  <span class="c1"># process :scale =&gt; [200, 300]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># def scale(width, height)</span>
</span><span class='line'>  <span class="c1">#   # do something</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create different versions of your uploaded files:</span>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:profile</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Add a white list of extensions which are allowed to be uploaded.</span>
</span><span class='line'>  <span class="c1"># For images you might use something like this:</span>
</span><span class='line'>  <span class="c1"># def extension_white_list</span>
</span><span class='line'>  <span class="c1">#   %w(jpg jpeg gif png)</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Override the filename of the uploaded files:</span>
</span><span class='line'>  <span class="c1"># Avoid using model.id or version_name here, see uploader/store.rb for details.</span>
</span><span class='line'>  <span class="c1"># def filename</span>
</span><span class='line'>  <span class="c1">#   &quot;something.jpg&quot; if original_filename</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>There is a lot of code in here commented out which will be used in later posts for using both Fog and Amazon S3.  I like being able to create different sizes under the version sections, for example</p>


<pre><code>&lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure class='code'&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
</code></pre>

<p><span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br /></p>

<p>to add elegant versatility to the sizes of your images.</p>




<p>In your Profile model add:</p>


<pre><code>    &lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;profile.rb &lt;/span&gt;&lt;/figcaption&gt;
</code></pre>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">mount_uploader</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="no">AvatarUploader</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div>


<p></figure></notextile></div></p>

<p>To display the avatar in your View:</p>


<pre><code>    &lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;show.html.erb &lt;/span&gt;&lt;/figcaption&gt;
</code></pre>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="n">image_url</span><span class="p">(</span><span class="ss">:thumb</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div>


<p></figure></notextile></div></p>

<p>In your form:</p>


<pre><code>    &lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;new.html.erb &lt;/span&gt;&lt;/figcaption&gt;
</code></pre>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:avatar</span> <span class="o">%&gt;</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div>


<p></figure></notextile></div></p>

<p> That is all, you can now add images of specific sizes to your Rails app!</p>


<p><a href='http://railscasts.com/episodes/253-carrierwave-file-uploads'>Carrierwave Railscast</a><br />
<a href='http://railscasts.com/episodes/383-uploading-to-amazon-s3'>Uploading to Amazon S3 Railscast</a><br />
<a href='http://railscasts.com/episodes/366-sidekiq'>Sidekiq Railscast</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search Trees]]></title>
    <link href="http://iacutone.github.io/blog/2013/04/22/binary-search-trees/"/>
    <updated>2013-04-22T14:13:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/04/22/binary-search-trees</id>
    <content type="html"><![CDATA[<h2>Properties</h2>


<ol>
    <li>The left subtree of a node contains only nodes with keys less than the node's key.</li>
    <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>
    <li>The left and right subtree must each also be a binary search tree.</li>
    <li>There must be no duplicate nodes.</li>
</ol>




<h3>Benefits</h3>


<ul>
    <li>Insert, find and remove any entry</li>
    <li>Quickly find entry with min/max key</li>
    <li>Entry nearest another entry, like in a dictionary, but cannot remember how to spell the word</li>
</ul>




<h3>BST Invariant</h3>


<p><p>For any node x, every key in the left subtree of x is &lt;= x&rsquo;s key</p>
<p>For any node x, every key in the right subtree of x is >= x&rsquo;s key</p>
<p><img src = "http://iacutone.github.io/images/BST.png" height = "500" width = "500"></p><br>
<p>Inorder traversal of a binary search tree visits nodes in sorted order, the left of root (18) are displayed before the right.<p/></p>

<p><h3>Operations</h3>
<h4>Entry Find (Object k)</h4>
<ul>
    <li>Object looking for compared to object stored in key (if it is there)</li>
    <li>If true, returns the entry</li>
    <li>Else returns nil</li>
    <li>Good for exact matches, can do faster with hash table</li>
</ul><br>
<p>How to find smallest key >= k or largest key &lt;= k?<p/>
    <p>When searching down the tree for a key k that is not in the tree, we encounter both.</p>
    <ul>
        <li>Node containing smallest key > k, and</li>
        <li>Node containing largest key &lt; k </li>
    </ul><br></p>

<pre><code>&lt;p&gt;Ex. search for 27 as k (from above pic)&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Keeps searching nodes to the right, gets to 28 and returns nil&lt;/li&gt;
    &lt;li&gt;encounters 25 &lt; k and 28 &gt; k&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p><h4> Entry first();<br> -If empty return null, otherwise start at root and walk down left repeatedly until you reach node with no left child, that node has minimum key.</h4>
<h4> Entry last();<br> -Mirror of left, but walks down right tree</h4></p>

<p><h4>Entry insert(Object k, Object v);</h4>
<ul>
    <li>Follow same path through the tree as find();</li>
    <li>When you reach null reference, replace null with reference to new node with entry(k, v), duplicate keys are allowed.</li>
    <li>Puts new entry on the left subtree of old one</li>
</ul></p>

<p><h4>The delete operations (where shit gets complex)</h4>
<h4>Entry remove(Object k);</h4>
<ul>
    <li>Find node n with key k, if k not found return null</li>
    <li>If n has no children, detach it from parent</li>
    <li>If n has one child, move child up to take n&rsquo;s place</li>
    <li>If node has 2 children</li>
    <ul>
        <li>Suppose we want to remove 12 from above pic</li>
        <li>Let x be the node in n&rsquo;s right subtree with smallest key</li>
        <ul>
            <li>Keep going to the left, in this case, 13 is node x, only has one child</li>
            <ul>
                <li>Remove x, has no left child and therefore, is easily removed</li>
                <li>Replace n&rsquo;s key with x&rsquo;s key</li>
            </ul>
        </ul>
    </ul>
</ul></p>

<p><p><img src = "http://iacutone.github.io/images/bstexample.png" height = "500" width = "500"></p><br></p>

<p><p>h/t Jonathan Shewchuk at UC Berkeley</p>
<a href='https://www.youtube.com/watch?v=V_3BM0ykITM'>His lecture via Youtube</a></p>
]]></content>
  </entry>
  
</feed>
