<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iacutone.rb]]></title>
  <link href="http://iacutone.github.io/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2017-04-22T18:03:38-04:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Photo Storage Solution]]></title>
    <link href="http://iacutone.github.io/blog/2017/04/15/my-photo-storage-solution/"/>
    <updated>2017-04-15T10:58:55-04:00</updated>
    <id>http://iacutone.github.io/blog/2017/04/15/my-photo-storage-solution</id>
    <content type="html"><![CDATA[<p>I have been searching for a photo storage solution. My solution only involves two devices, a raspberry pi and an external hard drive. This post will explain how to set up your pi in order to automatically transfer RAW and JPG photos from an SD card to the hard drive connected to the pi. The scripts I used are available <a href="http://github.com/iacutone/scripts">here</a>.</p>

<p>I like this solution because the entire process is automatic. You are notified when the photo transfer has finished with an email. Also, for redundancy, I created a cron job that syncs all of the photos on my hard drive to Amazon photos. I use <a href="https://rclone.org/">this service</a> to sync the photos in the cloud.</p>

<p>I found the hardest part of setting up my sync process is remembering the mount points.</p>

<h3>Steps</h3>

<h5>Mount the external hard drive to a folder on your pi.</h5>

<ul>
<li><code>sudo fdisk -l</code> take note of the Device, something like <code>/dev/sdb1</code></li>
<li>I like to mount the drive under the home dir, <code>sudo mount /dev/sdb1 ~/external_hd/</code></li>
<li>Run <code>lsblk -f</code>  to know here files are mounted</li>
</ul>


<h5>Create a <code>udev</code> rule</h5>

<ul>
<li><code>udev</code> rules live here: <code>/etc/udev/rules.d</code></li>
<li><code>cd /etc/udev/rules.d</code></li>
<li><code>touch 50-sdcard.rules</code></li>
<li><code>chmod +x 50-sdcard.rules</code></li>
<li><code>sudo fdisk -l</code> again to find the sd card device name, in this instance &lsquo;sda1&rsquo;</li>
<li><code>echo 'KERNEL=="sda1", ACTION=="add", RUN+="/home/pi/sdcard/sdcard_added.sh"' &lt; 50-sdcard.rules</code></li>
<li><code>tail -f /var/log/syslog</code> is extremely useful for debugging udev rules</li>
</ul>


<h5><code>rsync</code> when an sd card is added</h5>

<ul>
<li><code>touch /home/pi/sdcard/sdcard_added.sh</code></li>
<li><code>chmod +x /home/pi/sdcard/sdcard_added.sh</code></li>
<li>create the script</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;`date +%Y-%m-%d:%H:%M:%S` SD card inserted&quot;</span> &gt;&gt; /home/pi/sdcard/output.log
</span><span class='line'>mount /dev/sda1 /home/pi/SD_CARD
</span><span class='line'>rsync -av /home/pi/SD_CARD/DCIM/100MSDCF/ /home/pi/external_hd/raw_photos
</span></code></pre></td></tr></table></div></figure>


<h5>Sync photos to cloud provider</h5>

<ul>
<li>Set up cron job</li>
<li><code>sudo crontab -e</code></li>
<li><code>00 4 * * * /home/pi/sd_card/rclone_cron.sh</code>, this runs the cron job at 4 am, daily</li>
<li>create the bast script</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>/usr/sbin/rclone sync /home/pi/external_hd/raw_photos/ amazon:raw_photos --config /home/pi/.rclone.conf -v
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec and Elastic Search]]></title>
    <link href="http://iacutone.github.io/blog/2017/02/24/rspec-and-elastic-search/"/>
    <updated>2017-02-24T11:39:11-05:00</updated>
    <id>http://iacutone.github.io/blog/2017/02/24/rspec-and-elastic-search</id>
    <content type="html"><![CDATA[<p>I had a difficult time setting up  ElasticSearch on both RSpec (CircleCI) and Heroku. The ElasticSearch test cluster was not working on the CircleCI Docker image. Fortunately, one can configure the Circle environment to start with an ElasticSearch process. So, instead of using the test cluster, both my local testing environment and Circle environment use a real ElasticSearch process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ElasticSearch</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:all</span><span class="p">,</span> <span class="ss">elasticsearch</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">port</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CIRCLE_CI_ES_URL&#39;</span><span class="o">].</span><span class="n">present?</span> <span class="p">?</span> <span class="mi">9200</span> <span class="p">:</span> <span class="mi">9250</span>
</span><span class='line'>  <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Model</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">port</span><span class="p">:</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">elasticsearch</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Campaign</span><span class="o">.</span><span class="n">__elasticsearch__</span><span class="o">.</span><span class="n">create_index!</span><span class="p">(</span><span class="ss">force</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">elasticsearch</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Campaign</span><span class="o">.</span><span class="n">__elasticsearch__</span><span class="o">.</span><span class="n">delete_index!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a test needs to use ElasticSearch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="p">{</span> <span class="no">Campaign</span><span class="o">.</span><span class="n">__elasticsearch__</span><span class="o">.</span><span class="n">refresh_index!</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;#search&#39;</span><span class="p">,</span> <span class="ss">elasticsearch</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">search</span><span class="o">.</span><span class="n">results</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_present</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran into issues using ElasticSearch on Heroku when creating an index. Heroku review apps are configurable by defining an <code>app.json</code>. In the json file, Heroku can spin up an ElasticSearch process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;postdeploy&quot;</span><span class="p">:</span> <span class="s2">&quot;bundle exec rake db:schema:load db:seed&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s2">&quot;formation&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;web&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;free&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;quantity&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;elasticsearch&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;free&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;quantity&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The process is running before any Ruby code is executed. The next step is to create the index using <code>postdeploy</code>. Before creating ActiveRecord objects in the <code>seed.rb</code> file, create an index with <code>Model.index(force: true)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim, Thoughts After Two Weeks]]></title>
    <link href="http://iacutone.github.io/blog/2016/10/31/vim/"/>
    <updated>2016-10-31T16:31:06-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/10/31/vim</id>
    <content type="html"><![CDATA[<p>Purposefully, I began using Vim during a non-strenuous work week which helped manage frustration. I have been using solely Vim as a text editor for two weeks and have experienced improved efficienies over my previous text editor, Sublime.</p>

<h5>Improvments</h5>

<p>The ability to change between files quickly using the <a href="https://github.com/kien/ctrlp.vim">Ctrl-P</a> plugin is the biggest quality of life increase. Commands such as <code>/</code> and <code>?</code> make finding word matches in a file easy. Using RSpec with Vim is also great; I can change my code and re-run a single test without switching screens! There are many small wins with using Vim and they add up.</p>

<h5>Pain Points</h5>

<p>Adding new files does not work if the directory does not exist. The <a href="https://github.com/pbrisbin/vim-mkdir">mkdir</a> plugin solves this issue. Furthermore, commenting out code is a pain without <a href="https://github.com/tpope/vim-commentary">vim-commentary</a>. Checking my vimrc file into version controller has been helpful in debgging where breaking changes originate.</p>

<h5>More Resources</h5>

<p><a href="http://vimawesome.com">Vim Awesome</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Level Up With Vim]]></title>
    <link href="http://iacutone.github.io/blog/2016/10/11/level-up-with-vim/"/>
    <updated>2016-10-11T13:02:35-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/10/11/level-up-with-vim</id>
    <content type="html"><![CDATA[<p>How much time do you spend in your text editor? We spend most of our time reading through text and jumping between files. My goal is to find a tool in order to help me do this more efficiently. I have found that learning Vim is not overwhelming or difficult if you break the units of work down into manageable pieces. The ultimate goal is to use Vim fulltime. Below are my curated steps:</p>

<h5>Intro Video</h5>

<ul>
<li><a href="https://www.youtube.com/watch?v=_NUO4JEtkDw">Learning Vim in a Week</a></li>
</ul>


<h5>Vimtutor</h5>

<ul>
<li>Comprehensive introduction to Vim</li>
<li>Type <code>vimtutor</code> in a Terminal session</li>
<li>Complete a few sections per day</li>
</ul>


<h5>Screencasts</h5>

<ul>
<li><a href="http://derekwyatt.org/vim/tutorials/novice/">Derek Wyatt Novice</a></li>
<li>Watch one of these videos everyday</li>
</ul>


<h5>Advanced</h5>

<ul>
<li><a href="http://derekwyatt.org/vim/tutorials/intermediate/">Derek Wyatt Intermediate</a></li>
<li><a href="http://vimcasts.org/blog/2011/05/the-fugitive-series/">Vimcasts</a>, this series focuses on Vim-Fugitive, a GitHub plugin.</li>
</ul>


<h5>Helpful Links</h5>

<ul>
<li><a href="https://github.com/iacutone/dotfiles">Dotfiles</a></li>
<li>Slowly build and customize your vimrc</li>
<li>I find these plugins useful <a href="https://github.com/kien/ctrlp.vim">Ctrl-P</a> and <a href="https://github.com/tpope/vim-rails">Vim Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering Ack Results]]></title>
    <link href="http://iacutone.github.io/blog/2016/09/15/filtering-ack-results/"/>
    <updated>2016-09-15T10:23:52-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/09/15/filtering-ack-results</id>
    <content type="html"><![CDATA[<p>While setting up my VIM environment, I read a blogpost which states <code>ack</code> can ignore directories. For cleaner <code>ack</code> output you can setup the file below:</p>

<figure class='code'><figcaption><span>.ackrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--ignore-dir<span class="o">=</span>log
</span><span class='line'>--ignore-dir<span class="o">=</span>public/assets
</span><span class='line'>--ignore-dir<span class="o">=</span>vendor/assets
</span><span class='line'>--ignore-dir<span class="o">=</span>tmp/cache
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails `before_action` Method]]></title>
    <link href="http://iacutone.github.io/blog/2016/07/13/rails-before-action-method/"/>
    <updated>2016-07-13T13:31:20-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/07/13/rails-before-action-method</id>
    <content type="html"><![CDATA[<p>I did not know you could give a <code>before_action</code> a block argument. This is a benefit because you do not have to create a ruby method and pass the method into the <code>before_action</code>.</p>

<p>This got me thinking, what does <code>before_action</code> look like in Rails? The following is the source code from Rails 4.2.7, from <code>AbstractController::Callbacks::ClassMethods</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># :method: before_action</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># :call-seq: before_action(names, block)</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Append a callback before actions. See _insert_callbacks for parameter details.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Take callback names and an optional callback proc, normalize them,</span>
</span><span class='line'><span class="c1"># then call the block with each callback. This allows us to abstract</span>
</span><span class='line'><span class="c1"># the normalization across several methods that use it.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ==== Parameters</span>
</span><span class='line'><span class="c1"># * &lt;tt&gt;callbacks&lt;/tt&gt; - An array of callbacks, with an optional</span>
</span><span class='line'><span class="c1">#   options hash as the last parameter.</span>
</span><span class='line'><span class="c1"># * &lt;tt&gt;block&lt;/tt&gt;    - A proc that should be added to the callbacks.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ==== Block Parameters</span>
</span><span class='line'><span class="c1"># * &lt;tt&gt;name&lt;/tt&gt;     - The callback to be added</span>
</span><span class='line'><span class="c1"># * &lt;tt&gt;options&lt;/tt&gt;  - A hash of options to be used when adding the callback</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_insert_callbacks</span><span class="p">(</span><span class="n">callbacks</span><span class="p">,</span> <span class="n">block</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">callbacks</span><span class="o">.</span><span class="n">extract_options!</span>
</span><span class='line'>  <span class="n">_normalize_callback_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">callbacks</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="k">if</span> <span class="n">block</span>
</span><span class='line'>  <span class="n">callbacks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">callback</span><span class="o">|</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">callback</span><span class="p">,</span> <span class="n">options</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="ss">:before</span><span class="p">,</span> <span class="ss">:after</span><span class="p">,</span> <span class="ss">:around</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">callback</span><span class="o">|</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">callback</span><span class="si">}</span><span class="s2">_action&quot;</span> <span class="k">do</span> <span class="o">|*</span><span class="n">names</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="o">|</span>
</span><span class='line'>    <span class="n">_insert_callbacks</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">blk</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="n">set_callback</span><span class="p">(</span><span class="ss">:process_action</span><span class="p">,</span> <span class="n">callback</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I can do cool things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_action</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="vi">@foo</span> <span class="o">=</span> <span class="no">Model</span><span class="o">.</span><span class="n">find</span> <span class="n">params</span><span class="o">[</span><span class="ss">:bar</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would like to point out the <code>set_callback</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_action</span> <span class="ss">:authenticate</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># can also be called like this</span>
</span><span class='line'><span class="n">set_callback</span> <span class="ss">:process_action</span><span class="p">,</span> <span class="ss">:before</span><span class="p">,</span> <span class="ss">:authenticate</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend and Include in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2016/06/02/extend-and-include-in-ruby/"/>
    <updated>2016-06-02T16:25:45-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/06/02/extend-and-include-in-ruby</id>
    <content type="html"><![CDATA[<p>I have been trying to clean up some old code with Ruby modules. This post is to help me remember the differences between <code>include</code> and <code>extend</code> in Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">NumberHelper</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">NumberHelper</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">number_to_currency</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;$2.00&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">NumberHelper</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">number_to_currency</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;$2.00&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find and Replace Text]]></title>
    <link href="http://iacutone.github.io/blog/2016/05/15/find-and-replace-text/"/>
    <updated>2016-05-15T11:28:24-04:00</updated>
    <id>http://iacutone.github.io/blog/2016/05/15/find-and-replace-text</id>
    <content type="html"><![CDATA[<p>If you find yourself in the situation of needing to find and replace text in multiple files, use the Command Line Interface. I wanted to rename a Phoenix application and ran the below command.</p>

<p><code>ack pivotal_commentor -l | xargs sed -i '' 's/pivotal_commentor/commentor/g'</code></p>

<p>Let&rsquo;s break this command down with a simple example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir test
</span><span class='line'>cd test
</span><span class='line'>touch file1.txt
</span><span class='line'>touch file2.txt</span></code></pre></td></tr></table></div></figure>


<p>And lets add the text &lsquo;hello&rsquo; to both text files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ack hello -l
</span><span class='line'>file1.txt
</span><span class='line'>file2.txt</span></code></pre></td></tr></table></div></figure>


<p>ack is like grep and found the files containing the string hello. The -l flag &ldquo;Only print filenames containing matches&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ack hello -l | xargs
</span><span class='line'>file1.txt file2.txt</span></code></pre></td></tr></table></div></figure>


<p>xargs is a Unix utility that constructs argument lists and is smashing the filenames into one line.</p>

<p>Finally, we pipe the arguments from xargs to sed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ack hello -l | xargs sed -i '' 's/hello/bye/g'</span></code></pre></td></tr></table></div></figure>


<p>The -i flag allows for in place editing on the file. In the regex, the s replaces hello with bye and the g indicates globally, in case hello is found more than once in the file. The &lsquo;&rsquo; is sending the change into the correct output file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery beforeSend Function]]></title>
    <link href="http://iacutone.github.io/blog/2016/03/12/jquery-beforesend/"/>
    <updated>2016-03-12T15:32:09-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/03/12/jquery-beforesend</id>
    <content type="html"><![CDATA[<p>I have a form which submits a comment via AJAX. The app was throwing validation errors if there was no value in the comment field. My initial solution was to disable the submit button if the comment is blank. However, using the <code>beforeSend</code> function provides a cleaner solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">comment = </span><span class="p">(</span><span class="s">&#39;.form-field-comment&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>    <span class="nv">type: </span><span class="s">&#39;POST&#39;</span>
</span><span class='line'>    <span class="nv">dataType: </span><span class="s">&#39;script&#39;</span>
</span><span class='line'>    <span class="nv">url: </span><span class="nx">comment_form</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;action&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">data:</span>
</span><span class='line'>      <span class="nv">comment:</span>
</span><span class='line'>        <span class="nv">body: </span><span class="nx">comment</span>
</span><span class='line'>    <span class="nv">beforeSend: </span><span class="nf">() -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">comment</span> <span class="o">is</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1"># do this instead of disabling the submit button </span>
</span></code></pre></td></tr></table></div></figure>


<p>With the above code, the comment form is never posted if the comment is blank.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord None]]></title>
    <link href="http://iacutone.github.io/blog/2016/03/04/activerecord-none/"/>
    <updated>2016-03-04T19:15:38-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/03/04/activerecord-none</id>
    <content type="html"><![CDATA[<p>The .none class method was introduced in Rails 4.0.2 and is helpful when returning a blank array will break.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Organization</span><span class="o">.</span><span class="n">none</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation []&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[].</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`paginate&#39; for []:Array</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Helpful Links</h3>

<p><a href="http://apidock.com/rails/v4.0.2/ActiveRecord/QueryMethods/none">none</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submitting a Get Request in Rails]]></title>
    <link href="http://iacutone.github.io/blog/2016/02/05/submitting-a-get-request-in-rails/"/>
    <updated>2016-02-05T15:04:18-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/02/05/submitting-a-get-request-in-rails</id>
    <content type="html"><![CDATA[<p>For the error &ldquo;WARNING: Can&rsquo;t verify CSRF token authenticity&rdquo;, add a CSRF token.</p>

<figure class='code'><figcaption><span>_form.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_tag</span> <span class="n">some_path</span><span class="p">(</span><span class="vi">@organization</span><span class="p">),</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:get</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">hidden_field_tag</span> <span class="ss">:authenticity_token</span><span class="p">,</span> <span class="n">form_authenticity_token</span> <span class="c1"># this needs to be added!</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">submit_tag</span> <span class="s2">&quot;View&quot;</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">link_to_function</span> <span class="s1">&#39;Export&#39;</span><span class="p">,</span> <span class="s2">&quot;Javascript function which posts to another route&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The top-level block contains method: :get which doesn&rsquo;t auto-add the needed authenticity_token.</p>

<h3>Helpful Links</h3>

<p><a href="http://stackoverflow.com/questions/941594/understanding-the-rails-authenticity-token">Understanding the Rails Authenticity Token</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Example Blocks]]></title>
    <link href="http://iacutone.github.io/blog/2016/01/11/rspec-example-blocks/"/>
    <updated>2016-01-11T15:57:05-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/01/11/rspec-example-blocks</id>
    <content type="html"><![CDATA[<p>I recently discovered an interesting test pattern; defining variables in before and after hooks in the rails helper.</p>

<figure class='code'><figcaption><span>rails_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">hook</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@hook</span> <span class="o">=</span> <span class="s1">&#39;before hook&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>some_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="s2">&quot;some variable I need&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;my hook&#39;</span><span class="p">,</span> <span class="ss">hook</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;runs the hook&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="vi">@hook</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;before hook&#39;</span> <span class="c1"># returns true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A Real Example</h3>

<p>Let&rsquo;s say we are testing a controller and want to make sure only an admin has access to specific views.</p>

<figure class='code'><figcaption><span>rails_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">admin_signed_in</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">current_user_double</span> <span class="o">=</span> <span class="no">Test</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="ss">:admin</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">allow_any_instance_of</span><span class="p">(</span><span class="no">ApplicationController</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">current_user_double</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">user_signed_in</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">current_user_double</span> <span class="o">=</span> <span class="no">Test</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="ss">:admin</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">allow_any_instance_of</span><span class="p">(</span><span class="no">ApplicationController</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">current_user_double</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When setting admin_signed_in to true in a describe block, we have access to an admin user. I think it is cleaner to set up these users in a hook instead of a shared context or explicitly in the spec.</p>

<p>Helpful Links</p>

<p><a href="https://www.relishapp.com/rspec/rspec-core/docs/hooks/filters">Hooks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Mocks to Test Mailers in RSpec]]></title>
    <link href="http://iacutone.github.io/blog/2015/12/12/using-mocks-to-test-mailers-in-rspec/"/>
    <updated>2015-12-12T13:37:18-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/12/12/using-mocks-to-test-mailers-in-rspec</id>
    <content type="html"><![CDATA[<p>I was in the situation where I needed to test the delivery of emails based on specific sets of events. I began testing by inspecting sent emails in ActionMailer::Base.deliveries. However, this method of testing felt verbose and sloppy.</p>

<p>RSpec mocks is a great solution when you need to test that a specific method was called. In my case, I want a fundraiser to receive an email after a campaign goal is reached.</p>

<figure class='code'><figcaption><span>donation_funding.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DonationFunding</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:donation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">donation</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@donation</span> <span class="o">=</span> <span class="n">donation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fund</span>
</span><span class='line'>    <span class="c1"># do some work</span>
</span><span class='line'>    <span class="no">CampaignMailer</span><span class="o">.</span><span class="n">notify_curator_campaign_goal_reached</span><span class="p">(</span><span class="n">donation</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>donation_funding_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">donation</span><span class="o">.</span><span class="n">amount</span> <span class="o">=</span> <span class="n">campaign</span><span class="o">.</span><span class="n">goal_amount</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">donation</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Make a donation that exceeds the funding goal</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let!</span><span class="p">(</span><span class="ss">:funder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">funder</span> <span class="o">=</span> <span class="no">DonationFunding</span><span class="o">.</span><span class="n">new</span> <span class="n">donation</span>
</span><span class='line'>    <span class="n">funder</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># set up the donation for funding</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;sends email goal amount reached email to the curator&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">CampaignMailer</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:notify_curator_campaign_goal_reached</span><span class="p">)</span><span class="o">.</span><span class="n">and_call_original</span>
</span><span class='line'>    <span class="n">funder</span><span class="o">.</span><span class="n">fund</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Expect a CampaignMailer.notify_curator_campaign_goal_reached email to be sent</span>
</span></code></pre></td></tr></table></div></figure>


<p>The definition for the method and_call_original is, &ldquo;You can use and_call_original on the fluent interface to "pass through&rdquo; the received message to the original method.&ldquo; What exactly does this mean? It means that when I call funder.fund, I expect CampaignMailer.notify_curator_campaign_goal_reached to be called.</p>

<p>Helpful Links</p>

<p><a href="https://www.relishapp.com/rspec/rspec-mocks/v/2-14/docs/message-expectations/calling-the-original-method">Calling the original method</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ENV Variables in XCode]]></title>
    <link href="http://iacutone.github.io/blog/2015/12/03/env-variables-in-xcode/"/>
    <updated>2015-12-03T18:02:14-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/12/03/env-variables-in-xcode</id>
    <content type="html"><![CDATA[<p>Setting ENV variables in XCode in not straighforward. I have broken down how to accomplish setting up an ENV variable in the following videos and code example.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/r5HZwbkA52I" allowfullscreen></iframe></div>


<p>Make a new conifuration file and set any ENV variables you need.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/jwuQgWb58Xs" allowfullscreen></iframe></div>


<p>In the debug environment, use the debug.xcconfig file. Then, assign the value to something, in this case, SignUpUrl corresponds with the SIGN_UP_URL, which is set to localhost:4567/sign_up.</p>

<figure class='code'><figcaption><span>SignUpController.swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>  <span class="k">var</span> <span class="nl">info</span><span class="p">:[</span><span class="nl">NSObject</span><span class="p">:</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">infoDictionary</span><span class="o">!</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">sign_up_url</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="s">&quot;SignUpUrl&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sign_up_url variable is set to localhost:4567/signup.</p>

<p>Helpful Links</p>

<p><a href="http://bogardon.github.io/xcode/environment-variables/2013/05/20/configuring-env-variables-in-xcode.html">Configuring ENV Variables in XCode</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Contexts With RSpec]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec/"/>
    <updated>2015-11-20T16:45:46-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec</id>
    <content type="html"><![CDATA[<p>In the past, I used traits with my factories. Below is a simple example of defining a trait:</p>

<h3>Using traits</h3>

<figure class='code'><figcaption><span>donations_factories.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:donation</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">trait</span> <span class="ss">:with_amount</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">amount</span> <span class="mi">10</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">trait</span> <span class="ss">:no_amount</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">amount</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example spec:</p>

<figure class='code'><figcaption><span>donation_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="s1">&#39;Donation Matching&#39;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with an amount&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:donation</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:donation</span><span class="p">,</span> <span class="ss">:with_amount</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with no amount&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:donation</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:donation</span><span class="p">,</span> <span class="ss">:no_amount</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, I believe that using a shared context is a clearer approach. Defining the amount in a shared context and overriding the amount allows more control over testing use cases.</p>

<h3>Using a shared context</h3>

<figure class='code'><figcaption><span>donation_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;support/shared_contexts/donor_with_donation_context&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="s1">&#39;Donation Matching&#39;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">include_context</span> <span class="s1">&#39;a donor with a donation&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with an amount&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="sr">//</span> <span class="n">donation</span><span class="o">.</span><span class="n">amount</span> <span class="o">==</span> <span class="mi">10</span> <span class="p">(</span><span class="n">defined</span> <span class="k">in</span> <span class="n">the</span> <span class="n">shared</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with no amount&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:amount</span><span class="p">)</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>      <span class="sr">//</span> <span class="n">donation</span><span class="o">.</span><span class="n">amount</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with a gnarly&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:amount</span><span class="p">)</span> <span class="p">{</span> <span class="mi">09709780</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/support/shared_contexts/donor_with_donation_context.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">RSpec</span><span class="o">.</span><span class="n">shared_context</span> <span class="s1">&#39;a donor with a donation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:amount</span><span class="p">)</span> <span class="p">{</span> <span class="mi">10</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:donation</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:donation</span><span class="p">,</span> <span class="ss">amount</span><span class="p">:</span> <span class="n">amount</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I especially like the shared context approach because you can have shared context and redefine attributes as needed in specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout Xcode for Navigation Bar]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/13/auto-layout-xcode-for-navigation-bar/"/>
    <updated>2015-11-13T19:03:02-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/13/auto-layout-xcode-for-navigation-bar</id>
    <content type="html"><![CDATA[<p>Finding auto layout information is difficult. The steps below pin a navigation bar to the top of the screen for all iOS devices.</p>

<p><img class="center" src="http://iacutone.github.io/images/constraints.gif" title="" ></p>

<h3>Steps</h3>

<ul>
<li>Make sure &ldquo;Navigation Bar&rdquo; is selected on the left menu</li>
<li>Click the &ldquo;Pin&rdquo; button on the bottom right corner</li>
<li>Click the top, left and right constraints</li>
<li>Click the Height constraint</li>
<li>Add the 4 contraints</li>
</ul>


<p>The above steps &ldquo;pin&rdquo; the navigation bar object to the top of the view and stretch the navigation bar to the sides of the view. The height constraint keeps a static height for the navigation bar.</p>

<p>Helpful Links</p>

<p><a href="https://github.com/codepath/ios_guides/wiki/Auto-Layout-Basics">Auto Layout Basics</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototypes and Constructors in Javascript]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/07/prototypes-and-constructors-in-javascript/"/>
    <updated>2015-11-07T12:57:08-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/07/prototypes-and-constructors-in-javascript</id>
    <content type="html"><![CDATA[<p>I usually do not need to write code using neither constructors nor prototypes in Javascript. So, I always forget how to write them when I need to use them.</p>

<h2>Constructor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">Say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">say</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Say</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">say</span><span class="p">.</span><span class="nx">hello</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prototype</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">Say</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>   <span class="nx">Say</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">say</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Say</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">say</span><span class="p">.</span><span class="nx">hello</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Helpful Links</p>

<p><a href="http://stackoverflow.com/questions/310870/use-of-prototype-vs-this-in-javascript">Use of &lsquo;prototype&rsquo; vs. &lsquo;this&rsquo; in JavaScript?</a></p>

<p><a href="http://stackoverflow.com/questions/4508313/advantages-of-using-prototype-vs-defining-methods-straight-in-the-constructor">Advantages of using prototype, vs defining methods straight in the constructor?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Function]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/30/shell-function/"/>
    <updated>2015-10-30T23:34:34-04:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/30/shell-function</id>
    <content type="html"><![CDATA[<p>I have been using youtube-dl every week. The application is a &ldquo;Small command-line program to download videos from YouTube.com and other video sites.&rdquo; It&rsquo;s super useful. However, it default downloads to the current terminal directory. Let&rsquo;s write a simple shell script in order to place all downloaded files from youtube-dl in the same directory.</p>

<figure class='code'><figcaption><span>.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function</span> mp3 <span class="o">{</span>
</span><span class='line'>  <span class="c"># Download all of the things to /Downloads</span>
</span><span class='line'>
</span><span class='line'>  youtube-dl --default-search<span class="o">=</span>ytsearch: <span class="se">\</span>
</span><span class='line'>             --output<span class="o">=</span><span class="s2">&quot;Downloads/%(title)s.%(ext)s&quot;</span> <span class="s2">&quot;$*&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;$<em>&rdquo; signifies the string following mp3, the example below, &ldquo;$</em>&rdquo; is the URL arument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  mp3 https://www.youtube.com/watch<span class="se">\?</span>v<span class="se">\=</span>9fYeiGeuTFA
</span></code></pre></td></tr></table></div></figure>


<p>Now I can run the above script in order to download the video from the youtube URL.!</p>

<p>Helpful Links</p>

<p><a href="https://github.com/rg3/youtube-dl">youtube-dl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Setter Method in a Rails Model]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model/"/>
    <updated>2015-10-23T16:30:53-04:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model</id>
    <content type="html"><![CDATA[<p>At Fractured Atlas, we are trying to move away from the additional complexity of using callbacks. For example, let&rsquo;s say we need to do something in a before_save callback such as lowercase a user&rsquo;s email.</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">before_save</span><span class="p">:</span> <span class="n">lowercase_email</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lowercase_email</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How is this code implemented without using before_save? One method would be overriding the setter accessor.</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">email</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'> <span class="n">email</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'> <span class="k">super</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when the email attribute is updated, my email setter method is called.</p>

<p>Currently, both implementations for downcasing an email are straightforward. However, as the application grows, the before_save callback is more difficult to test and maintain. The before_save is implicit and might have unexpected side effects. Here is a basic spec.</p>

<figure class='code'><figcaption><span>user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#lowercase_email&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;GNARLY@email.com&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;lowercases the email&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">lowercase_email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;gnarly@email.com&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, let&rsquo;s test the <em>behavior</em> of what we expect.</p>

<figure class='code'><figcaption><span>user_creation_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;User Creation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;:email&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;GNARLY@email.com&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;it returns a standardized email&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;gnarly@email.com&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first spec is directly testing the callback, whereas the latter spec is testing the <em>behavior</em> of the expected outcome. The latter spec is easier to reason about and change. This is an easy example, but as callbacks grow changing their behavior becomes more difficult. This is especially true if the callbacks are coupled with other models.</p>

<p><em>Helpful Links</em></p>

<p><a href="http://stackoverflow.com/questions/10464793/what-is-the-right-way-to-override-a-setter-method-in-ruby-on-rails">What is the right way to override a setter method in Ruby on Rails?</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord%3a%3aBase-label-Overwriting+default+accessors">Overwriting default accessors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Fetch Method]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method/"/>
    <updated>2015-09-18T19:15:29-04:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method</id>
    <content type="html"><![CDATA[<p>Checking for values in a Rails params hash is complicated. In this post we will use the #fetch method to ensure nil is not called on a params hash.</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">][</span><span class="ss">:organization_id</span><span class="o">].</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will call #present? on nil if params[:search][:organization_id] does not exist.</p>

<p>A better way to write the conditional:</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">].</span><span class="n">present</span> <span class="ow">and</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">][</span><span class="ss">:organization_id</span><span class="o">].</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing a similar conditional with #fetch:</p>

<figure class='code'><figcaption><span>searches_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># do things</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break this method down into simpler components:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>  <span class="sr">//</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;searched!&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>  <span class="sr">//</span> <span class="s2">&quot;searched!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="sr">//</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:organization_id</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:organization_id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="sr">//</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like the ability to call #fetch with a default return value if one does not exist. This leads to better ways to handle nil or catch errors.</p>
]]></content>
  </entry>
  
</feed>
