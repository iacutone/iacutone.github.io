<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Iacutone Deep Thoughts]]></title>
  <link href="http://iacutone.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-10-30T22:45:14-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Setter Method in a Rails Model]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model/"/>
    <updated>2015-10-23T15:30:53-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model</id>
    <content type="html"><![CDATA[<p>At Fractured Atlas, we are trying to move away from the additional complexity of using callbacks. For example, let&rsquo;s say we need to do something in a before_save callback such as lowercase a user&rsquo;s email.</p>

<pre><code class="ruby user.rb">
before_save: lowercase_email

def lowercase_email
  self.email = self.email.downcase
end
</code></pre>

<p>How is this code implemented without using before_save? One method would be overriding the setter accessor.</p>

<pre><code class="ruby user.rb">
def email=(value)
 email = value.downcase
 super(email)
end
</code></pre>

<p>Now, when the email attribute is updated, my email setter method is called.</p>

<p>Currently, both implementations for downcasing an email are straightforward. However, as the application grows, the before_save callback is more difficult to test and maintain. The before_save is implicit and might have unexpected side effects. Here is a basic spec.</p>

<pre><code class="ruby user_spec.rb">
describe User do

  let(:user) { FactoryGirl.create(:user) }

  describe '#lowercase_email' do
    before { user.email = 'GNARLY@email.com' }

    it 'lowercases the email' do
      expect(user.lowercase_email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>Instead, let&rsquo;s test the <em>behavior</em> of what we expect.</p>

<pre><code class="ruby user_creation_spec.rb">
describe 'User Creation' do
  let(:user) { FactoryGirl.create(:user) }

  describe ':email' do
    before { user.email = 'GNARLY@email.com' }

    'it returns a standardized email' do
      expect(user.email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>The first spec is directly testing the callback, whereas the latter spec is testing the <em>behavior</em> of the expected outcome. The latter spec is easier to reason about and change. This is an easy example, but as callbacks grow changing their behavior becomes more difficult. This is especially true if the callbacks are coupled with other models.</p>

<p><em>Helpful Links</em></p>

<p><a href="http://stackoverflow.com/questions/10464793/what-is-the-right-way-to-override-a-setter-method-in-ruby-on-rails">What is the right way to override a setter method in Ruby on Rails?</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord%3a%3aBase-label-Overwriting+default+accessors">Overwriting default accessors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Fetch Method]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method/"/>
    <updated>2015-09-18T18:15:29-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method</id>
    <content type="html"><![CDATA[<p>Checking for values in a Rails params hash is complicated. In this post we will use the #fetch method to ensure nil is not called on a params hash.</p>

<pre><code class="ruby searches_helper.rb">  if params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>The code above will call #present? on nil if params[:search][:organization_id] does not exist.</p>

<p>A better way to write the conditional:</p>

<pre><code class="ruby searches_helper.rb">  if params[:search].present and params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>Writing a similar conditional with #fetch:</p>

<pre><code class="ruby searches_helper.rb">  if params.fetch(:search, {}).fetch(:organization_id, nil).present?
    # do things
  end
</code></pre>

<p>Let&rsquo;s break this method down into simpler components:</p>

<pre><code class="ruby">  params = {}
  puts params.fetch(:search, {})
  // {}

  params[:search] = "searched!"
  puts params.fetch(:search, {})
  // "searched!"

  puts fetch(:organization_id, nil)
  // nil

  params[:organization_id] = 1
  puts params.fetch(:organization_id, nil)
  // 1
</code></pre>

<p>I like the ability to call #fetch with a default return value if one does not exist. This leads to better ways to handle nil or catch errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations/"/>
    <updated>2014-01-21T23:46:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations</id>
    <content type="html"><![CDATA[<p> I have been working on refactoring my client side JavaScript validations on an application.  My tech lead gave me some illuminating tips on how to refactor my non-DRY code.  Here is an example of the pre-refactored code.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name %>
        <span id="first_name_error"></span>
      </div>
      <div class="input">
        &lt;%#= f.hidden_field :customer_id, value: current_user.id unless current_user.id == nil %>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email %>
        <span id="email_error"></span>
      </div>
    </div>
  </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>So, let's start with this basic form and sprinkle it with some JQuery and Javascript for client side validations.</p>


<p>{% codeblock users.js lang:js %}
// Initial State for Form
$(&lsquo;.your_info&rsquo;).hide();</p>

<p>// validations
var first_name = $(&lsquo;input#order_first_name&rsquo;);
var last_name = $(&lsquo;input#order_last_name&rsquo;);
var email = $(&lsquo;input#order_email&rsquo;);</p>

<p>// event listeners
first_name.keyup(function(){
  validateFirstName();
});</p>

<p>last_name.keyup(function(){
  validateLastName();
});</p>

<p>email.keyup(function(){
  validateEmail();
});</p>

<p>function validateFirstName(){
  var first_name_val = first_name.val();
  if(first_name_val.length == 0) {
    first_name_error.show().text(&ldquo;First name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    first_name_error.hide();
    return true;
  }
}</p>

<p>function validateLastName(){
  var last_name_val = last_name.val();
  if(last_name_val.length == 0) {
    last_name_error.show().text(&ldquo;Last name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    last_name_error.hide();
    return true;
  }
}</p>

<p>function validateEmail(){
  var email_val = email.val();
  if(email_val.length == 0) {
    email_error.show().text(&ldquo;Email needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    email_error.hide();
    return true;
  }
}
{% endcodeblock %}</p>

<p>Clearly, this is not DRY and will easily get out of comtrol.  However, using HTML data attributes solves this problem.  Here is a good <a href='http://ejohn.org/blog/html-5-data-attributes/'>summary</a> about data attributes by John Resig.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name, :data => {:error => &lsquo;First name&rsquo;} %>
        <span id="first_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name, :data => {:error => &lsquo;Last name&rsquo;} %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email, :data => {:error => &lsquo;Email&rsquo;} %>
        <span id="email_error"></span>
      </div>
    </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>{% codeblock users.js lang:js %}
$(&lsquo;input&rsquo;).keyup(function(){
  blankValidation.call(this);
});</p>

<p>function blankValidation(){
  var error_name = $(this).data(&lsquo;error&rsquo;);
  console.log(error_name);
  var value = $(this).val();
  console.log(value);
  if(error_name !== undefined){
    var error_id = (&lsquo;#&rsquo; + error_name.toLowerCase().replace(&lsquo; &rsquo;, &lsquo;<em>&rsquo;) + (&lsquo;</em>error&rsquo;));
    var error_message = $(error_id);
    if(value.length === 0) {
      error_message.show().text(error_name + &ldquo; needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
      return false;
    }
    else {
      error_message.hide();
      return true;
    }
  }
}
{% endcodeblock %}</p>

<p>We can dynamically call the data attribute for each element.  For example, the error_name value the keyup event(m) will console.log (=> First name, m). The call method allows us to refactor all of our keyup event listeners into one method.  The call method as defined by the Mozilla guide "calls a function with a given this value and arguments provided individually."</p>


<p>h/t Dan Porter</p>




<p>Reference</p>


<ul>
  <li><a href='http://yehudakatz.com/2011/08/11/understanding-JavaScript-function-invocation-and-this/'>Understanding JavaScript Function Invocation and this</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call()</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'>Function.prototype.apply()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Your Way to Success]]></title>
    <link href="http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success/"/>
    <updated>2013-10-22T21:36:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success</id>
    <content type="html"><![CDATA[<p>I have been immersed in production codebases for my <a href='fohrcard.com'>Fohr Card</a> and <a href='http://www.fracturedatlas.org/'>Fractured Atlas</a> projects.  At first, it feel initimidating trying to figure out all of the models and related associations.  I have found that a great way to wrap your head around the code base is to create a new branch and test the code.</p>




<p>A good basic set-up is to start unit testing the models.  In order to do this depends on if your codebase is using a relational database or something like Mongoid.</p>




<h3>Relational Databases</h3>


<p>{% codeblock Gemfile lang:ruby %}</p>

<pre><code>group :development do
  gem 'guard-rspec', require: false
end

group :test do
   gem 'rspec-rails'
   gem 'factory_girl_rails'
   gem 'faker'
   gem 'shoulda-matchers'
   gem 'terminal-notifier-guard' 
end
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
    <li>Guard RSpec waits for you to save your files and automatically runs your tests, thereby reducing the time needed to run tests.</li>
    <li>I like the RSpec syntax over Unit Test and Mini Test.</li>
    <li>Factory Girl Rails creates objects for your tests.  This gem deserves its own blog post. </li>
    <li>The Faker Gem is used in conjunction with Factory Girl Rails to create fake data.</li>
    <li>I like to use Shoulda Matchers to test validaitons and associations in the code.  This gem and firing up Rails Console to play with the objects in my testing is the crux to learning a new codebase.</li>
    <li>Some people find Terminal Notifier annoying, but it helps me know if my tests pass when I have Sublime maximized on my 11 inch MacBook Air screen.</li>
</ul>


<p></p>

<h3>Mongoid</h3>


<p>{% codeblock Gemfile lang:ruby %}</p>

<pre><code>group :development do
  gem 'guard-rspec', require: false
end

group :test do
  gem 'fabrication'
  gem 'faker'
  gem 'rspec-rails'
  gem 'mongoid-rspec'
  gem 'terminal-notifier-guard' 
end
</code></pre>

<p>{% endcodeblock %}</p>

<p><p>The gems for Mongoid testing are similar to those used in testing with a relational database.<p>
<ul>
    <li>The Fabrication gem is similar to building objects with Factory Girl, except the documentation website <a href='http://www.fabricationgem.org/'>rocks.</a></li>
    <li>The Mongoid RSpec gem is similar to Shoulda-Matchers</li>
</ul></p>

<p><h3>Gems</h3>
<a href='https://github.com/guard/guard-rspec'>Guard RSpec</a></br>
<a href='https://github.com/rspec/rspec-rails'>RSpec Rails</a></br>
<a href='https://github.com/thoughtbot/factory_girl_rails'>Factory Girl Rails</a></br>
<a href='https://github.com/btelles/faker'>Faker</a></br>
<a href='https://github.com/thoughtbot/shoulda-matchers'>Shoulda Matchers</a></br>
<a href='https://github.com/Springest/terminal-notifier-guard'>Terminal Notifier Guard</a></br>
<a href='https://github.com/paulelliott/fabrication'>Fabrication</a></br>
<a href='https://github.com/evansagge/mongoid-rspec'>Mongoid RSpec</a></br></br></p>

<p><h3>Other Resources</h3>
<p>I found this book invaluable in learning best practices in testing: <a href='https://leanpub.com/everydayrailsrspec'>Everday RSpec</a></br>h/t Victoria Friedman</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Your Password From Scratch]]></title>
    <link href="http://iacutone.github.io/blog/2013/09/07/changing-your-password-from-scratch/"/>
    <updated>2013-09-07T01:08:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/09/07/changing-your-password-from-scratch</id>
    <content type="html"><![CDATA[<p> So say you are using devise and have none of the has_secure_password medthod available to you.  One should learn the bcrypt gem... and needs to abstract some methods in order to parse an encrypted password.  Cool, Bcrypt can do that, as located <a href ='  https://github.com/rails/rails/blob/b965ce361b89ad33a4a4b422f8e564233926c723/activemodel/lib/active_model/secure_password.rb#L42
'>here.</a> Here is my modified code in order to confirm if a new password in order to apply a boolean value to an inputed password.</p>


<p>{% codeblock edit.html.haml lang: ruby %}
 %li
      = f.label :current_password
      = f.password_field :current_password
      # => &lsquo;password&rsquo;
    %li
      = f.label :new_password, &lsquo;New Password&rsquo;
      = f.password_field :new_password
      # => &lsquo;new_password&rsquo;</p>

<p>  .buttons
    %button Save
{% endcodeblock %}</p>

<p>{% codeblock user.rb lang:ruby %} <br/>
    def authenticate(unencrypted_password)
    if BCrypt::Password.new(encrypted_password) == unencrypted_password &amp;&amp; self
      bcrypt = ::BCrypt::Password.new(encrypted_password)
      # creates a bcrypt variable if the encrypted passwors result is true
      # => &ldquo;$2a$10$wgOzLhy84peHUD9wr9UkgOKRpwfls/0h48NYVvKIOdUdbz3XOEpSK&rdquo;
      password = ::BCrypt::Engine.hash_secret(password, bcrypt.salt)
      # then salts the new password
      # => &ldquo;$2a$10$VUNoD3xdAp7ytTIsTyH5feY.DNUKA4efIdkcI6ViBQ532o8lyNV/e&rdquo;
      user = nil unless reset_secure_compare(password, encrypted_password)
      return true
    else BCrypt::Password.new(encrypted_password) != unencrypted_password &amp;&amp; self
      return false
    end
  end
{% endcodeblock %}</p>

<p> <p>You might be wondering what the reset_secure_password method is doing.  Well, it is pulled from the Devise docs and is preventing <a href='http://en.wikipedia.org/wiki/Timing_attack'>timing attacks,</a> when an attacker attempts to compromise an encryption by analyzing the time taken in order to execute the password and salting algorithms.</p></p>

<p>Cool, now I can pass my current_password attribute to make sure it is true.  I need to make a custom <a href='http://edgeguides.rubyonrails.org/active_record_validations.html'>Active Record Validations.</a></p>


<p>{% codeblock user.rb lang:ruby %}
    def correct_password_update_validator
      if self.authenticate(current_password) == true and current_password.present? and new_password.present?
        self.encrypted_password = ::BCrypt::Password.create(new_password)
      end
     end
{% endcodeblock %}</p>

<p>If this validates, encrypted_password on the database returns true.  Now I need validations for events with blank fields (I want nothing to happen), and also, if current_password is blank and new_password and present, visa versa.</p>


<p>{% codeblock user.rb lang:ruby %}</p>

<pre><code>validate :incorrect_password_update_validator, on: :update
</code></pre>

<p>  validate :correct_password_update_validator, on: :update
  validate :current_password_present, on: :update
  validate :new_password_present, on: :update
  validate :current_password_true_present, on: :update</p>

<p>  private</p>

<pre><code>def current_password_true_present
if self.authenticate(current_password) == true and new_password.blank? and current_password.present?
  errors.add(:new_password, " needs to be filled out.")
end
</code></pre>

<p>  end</p>

<p>  def current_password_present
    if self.authenticate(current_password) == false and new_password.present? and current_password.blank?
      errors.add(:current_password, &ldquo; needs to be filled out.&rdquo;)
    end
  end</p>

<p>  def new_password_present
    if self.authenticate(current_password) == false and new_password.blank? and current_password.present?
      errors.add(:new_password, &ldquo; needs to be filled out.&rdquo;)
    end
  end</p>

<p>  def incorrect_password_update_validator
    if self.authenticate(current_password) == false and current_password.present? and new_password.present?
      errors.add(:current_password, &ldquo; does not match.&rdquo;)
    end
  end</p>

<p>  def reset_secure_compare(a, b)
    return false if a.blank? || b.blank? || a.bytesize != b.bytesize
    l = a.unpack &ldquo;C#{a.bytesize}&rdquo;</p>

<pre><code>res = 0
b.each_byte { |byte| res |= byte ^ l.shift }
res == 0
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>Now, all use cases of the user improperly editing the form result in false and a validation error occurs.</p>

]]></content>
  </entry>
  
</feed>
