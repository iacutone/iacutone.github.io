<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Iacutone.rb]]></title>
  <link href="http://iacutone.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-11-20T18:45:41-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shared Contexts With RSpec]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec/"/>
    <updated>2015-11-20T16:45:46-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec</id>
    <content type="html"><![CDATA[<p>In the past, I used traits with my factories. Below is a simple example of defining a trait:</p>

<h3>Using traits</h3>

<pre><code class="ruby donations_factories.rb">  FactoryGirl.define do
    factory :donation do
      trait :with_amount do
        amount 10
      end

      trait :no_amount do
        amount 0
      end
    end
  end
</code></pre>

<p>An example spec:</p>

<pre><code class="ruby donation_spec.rb">  RSpec.describe 'Donation Matching', :type =&gt; :model do

    context 'with an amount' do
      let(:donation) { create(:donation, :with_amount) }
    end

    context 'with no amount' do
      let(:donation) { create(:donation, :no_amount) }
    end
  end
</code></pre>

<p>However, I believe that using a shared context is a clearer approach. Defining the amount in a shared context and overriding the amount allows more control over testing use cases.</p>

<h3>Using a shared context</h3>

<pre><code class="ruby donation_spec.rb">  require 'support/shared_contexts/donor_with_donation_context'

  RSpec.describe 'Donation Matching', :type =&gt; :model do
    include_context 'a donor with a donation'

    context 'with an amount' do
      // donation.amount == 10 (defined in the shared context)
    end

    context 'with no amount' do
      let(:amount) { 0 }
      // donation.amount == 0
    end

    context 'with a gnarly' do
      let(:amount) { 09709780 }
    end
  end
</code></pre>

<pre><code class="ruby spec/support/shared_contexts/donor_with_donation_context.rb">  RSpec.shared_context 'a donor with a donation' do
    let(:amount) { 10 }

    let(:donation) { create(:donation, amount: amount) }
  end
</code></pre>

<p>I especially like the shared context approach because you can have shared context and redefine attributes as needed in specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Setter Method in a Rails Model]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model/"/>
    <updated>2015-10-23T15:30:53-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model</id>
    <content type="html"><![CDATA[<p>At Fractured Atlas, we are trying to move away from the additional complexity of using callbacks. For example, let&rsquo;s say we need to do something in a before_save callback such as lowercase a user&rsquo;s email.</p>

<pre><code class="ruby user.rb">
before_save: lowercase_email

def lowercase_email
  self.email = self.email.downcase
end
</code></pre>

<p>How is this code implemented without using before_save? One method would be overriding the setter accessor.</p>

<pre><code class="ruby user.rb">
def email=(value)
 email = value.downcase
 super(email)
end
</code></pre>

<p>Now, when the email attribute is updated, my email setter method is called.</p>

<p>Currently, both implementations for downcasing an email are straightforward. However, as the application grows, the before_save callback is more difficult to test and maintain. The before_save is implicit and might have unexpected side effects. Here is a basic spec.</p>

<pre><code class="ruby user_spec.rb">
describe User do

  let(:user) { FactoryGirl.create(:user) }

  describe '#lowercase_email' do
    before { user.email = 'GNARLY@email.com' }

    it 'lowercases the email' do
      expect(user.lowercase_email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>Instead, let&rsquo;s test the <em>behavior</em> of what we expect.</p>

<pre><code class="ruby user_creation_spec.rb">
describe 'User Creation' do
  let(:user) { FactoryGirl.create(:user) }

  describe ':email' do
    before { user.email = 'GNARLY@email.com' }

    'it returns a standardized email' do
      expect(user.email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>The first spec is directly testing the callback, whereas the latter spec is testing the <em>behavior</em> of the expected outcome. The latter spec is easier to reason about and change. This is an easy example, but as callbacks grow changing their behavior becomes more difficult. This is especially true if the callbacks are coupled with other models.</p>

<p><em>Helpful Links</em></p>

<p><a href="http://stackoverflow.com/questions/10464793/what-is-the-right-way-to-override-a-setter-method-in-ruby-on-rails">What is the right way to override a setter method in Ruby on Rails?</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord%3a%3aBase-label-Overwriting+default+accessors">Overwriting default accessors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Fetch Method]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method/"/>
    <updated>2015-09-18T18:15:29-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method</id>
    <content type="html"><![CDATA[<p>Checking for values in a Rails params hash is complicated. In this post we will use the #fetch method to ensure nil is not called on a params hash.</p>

<pre><code class="ruby searches_helper.rb">  if params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>The code above will call #present? on nil if params[:search][:organization_id] does not exist.</p>

<p>A better way to write the conditional:</p>

<pre><code class="ruby searches_helper.rb">  if params[:search].present and params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>Writing a similar conditional with #fetch:</p>

<pre><code class="ruby searches_helper.rb">  if params.fetch(:search, {}).fetch(:organization_id, nil).present?
    # do things
  end
</code></pre>

<p>Let&rsquo;s break this method down into simpler components:</p>

<pre><code class="ruby">  params = {}
  puts params.fetch(:search, {})
  // {}

  params[:search] = "searched!"
  puts params.fetch(:search, {})
  // "searched!"

  puts fetch(:organization_id, nil)
  // nil

  params[:organization_id] = 1
  puts params.fetch(:organization_id, nil)
  // 1
</code></pre>

<p>I like the ability to call #fetch with a default return value if one does not exist. This leads to better ways to handle nil or catch errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations/"/>
    <updated>2014-01-21T23:46:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations</id>
    <content type="html"><![CDATA[<p> I have been working on refactoring my client side JavaScript validations on an application.  My tech lead gave me some illuminating tips on how to refactor my non-DRY code.  Here is an example of the pre-refactored code.</p>


<p><figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&amp;lt;%= form_for(@order) do |f| </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&#39;your_info&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;2. Your Information&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :first_name, &amp;lsquo;First name&lt;em&gt;&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :first_name </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;first_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%#= f.hidden_field :customer_id, value: current_user.id unless current_user.id == nil </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :last_name, &amp;lsquo;Last name&lt;/em&gt;&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :last_name </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;last_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :email, &amp;lsquo;Email*&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :email </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;email_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;%= f.submit &amp;ldquo;Submit your Order&amp;rdquo;, class: &amp;lsquo;btn btn-primary btn-lg&amp;rsquo;, id: &amp;lsquo;button&amp;rsquo;, data: { confirm: &amp;ldquo;Place order?&amp;rdquo; } </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&amp;lt;% end </span><span class="err">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So, let's start with this basic form and sprinkle it with some JQuery and Javascript for client side validations.</p>


<p><figure class='code'><figcaption><span>users.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Initial State for Form</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="nx">your_info</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">hide</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// validations</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">first_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="err">#</span><span class="nx">order_first_name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">last_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="err">#</span><span class="nx">order_last_name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="err">#</span><span class="nx">order_email</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// event listeners</span>
</span><span class='line'><span class="nx">first_name</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateFirstName</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">last_name</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateLastName</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">email</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">validateEmail</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">validateFirstName</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">first_name_val</span> <span class="o">=</span> <span class="nx">first_name</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">first_name_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">First</span> <span class="nx">name</span> <span class="nx">needed</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">error_class</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">validateLastName</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">last_name_val</span> <span class="o">=</span> <span class="nx">last_name</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">last_name_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">last_name_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Last</span> <span class="nx">name</span> <span class="nx">needed</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">error_class</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">last_name_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">validateEmail</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">email_val</span> <span class="o">=</span> <span class="nx">email</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">email_val</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">email_error</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Email</span> <span class="nx">needed</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">error_class</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">email_error</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Clearly, this is not DRY and will easily get out of comtrol.  However, using HTML data attributes solves this problem.  Here is a good <a href='http://ejohn.org/blog/html-5-data-attributes/'>summary</a> about data attributes by John Resig.</p>


<p><figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&amp;lt;%= form_for(@order) do |f| </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&#39;your_info&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;2. Your Information&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :first_name, &amp;lsquo;First name&lt;em&gt;&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :first_name, :data =&gt; {:error =&gt; &amp;lsquo;First name&amp;rsquo;} </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;first_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :last_name, &amp;lsquo;Last name&lt;/em&gt;&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :last_name, :data =&gt; {:error =&gt; &amp;lsquo;Last name&amp;rsquo;} </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;last_name_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;div class=&quot;clearfix&quot;&gt;</span>
</span><span class='line'><span class="x">      &amp;lt;%= f.label :email, &amp;lsquo;Email*&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;input&quot;&gt;</span>
</span><span class='line'><span class="x">        &amp;lt;%= f.text_field :email, :data =&gt; {:error =&gt; &amp;lsquo;Email&amp;rsquo;} </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;span id=&quot;email_error&quot;&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;%= f.submit &amp;ldquo;Submit your Order&amp;rdquo;, class: &amp;lsquo;btn btn-primary btn-lg&amp;rsquo;, id: &amp;lsquo;button&amp;rsquo;, data: { confirm: &amp;ldquo;Place order?&amp;rdquo; } </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&amp;lt;% end </span><span class="err">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>users.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">blankValidation</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">blankValidation</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">error_name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error_name</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error_name</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">error_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">error_name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">+</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;error&amp;rsquo;));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">error_message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">error_id</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error_message</span><span class="p">.</span><span class="nx">show</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="nx">error_name</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="nx">needed</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">error_class</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error_message</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can dynamically call the data attribute for each element.  For example, the error_name value the keyup event(m) will console.log (=> First name, m). The call method allows us to refactor all of our keyup event listeners into one method.  The call method as defined by the Mozilla guide "calls a function with a given this value and arguments provided individually."</p>


<p>h/t Dan Porter</p>




<p>Reference</p>


<ul>
  <li><a href='http://yehudakatz.com/2011/08/11/understanding-JavaScript-function-invocation-and-this/'>Understanding JavaScript Function Invocation and this</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call()</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'>Function.prototype.apply()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Your Way to Success]]></title>
    <link href="http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success/"/>
    <updated>2013-10-22T21:36:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success</id>
    <content type="html"><![CDATA[<p>I have been immersed in production codebases for my <a href='fohrcard.com'>Fohr Card</a> and <a href='http://www.fracturedatlas.org/'>Fractured Atlas</a> projects.  At first, it feel initimidating trying to figure out all of the models and related associations.  I have found that a great way to wrap your head around the code base is to create a new branch and test the code.</p>




<p>A good basic set-up is to start unit testing the models.  In order to do this depends on if your codebase is using a relational database or something like Mongoid.</p>




<h3>Relational Databases</h3>


<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;group :development do</span>
</span><span class='line'><span class="sr">  gem &#39;guard-rspec&#39;, require: false</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">group :test do</span>
</span><span class='line'><span class="sr">   gem &#39;rspec-rails&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;factory_girl_rails&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;faker&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;shoulda-matchers&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;terminal-notifier-guard&#39; </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
    <li>Guard RSpec waits for you to save your files and automatically runs your tests, thereby reducing the time needed to run tests.</li>
    <li>I like the RSpec syntax over Unit Test and Mini Test.</li>
    <li>Factory Girl Rails creates objects for your tests.  This gem deserves its own blog post. </li>
    <li>The Faker Gem is used in conjunction with Factory Girl Rails to create fake data.</li>
    <li>I like to use Shoulda Matchers to test validaitons and associations in the code.  This gem and firing up Rails Console to play with the objects in my testing is the crux to learning a new codebase.</li>
    <li>Some people find Terminal Notifier annoying, but it helps me know if my tests pass when I have Sublime maximized on my 11 inch MacBook Air screen.</li>
</ul>


<p></p>

<h3>Mongoid</h3>


<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;group :development do</span>
</span><span class='line'><span class="sr">  gem &#39;guard-rspec&#39;, require: false</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">group :test do</span>
</span><span class='line'><span class="sr">  gem &#39;fabrication&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;faker&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;rspec-rails&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;mongoid-rspec&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;terminal-notifier-guard&#39; </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>The gems for Mongoid testing are similar to those used in testing with a relational database.<p>
<ul>
    <li>The Fabrication gem is similar to building objects with Factory Girl, except the documentation website <a href='http://www.fabricationgem.org/'>rocks.</a></li>
    <li>The Mongoid RSpec gem is similar to Shoulda-Matchers</li>
</ul></p>

<p><h3>Gems</h3>
<a href='https://github.com/guard/guard-rspec'>Guard RSpec</a></br>
<a href='https://github.com/rspec/rspec-rails'>RSpec Rails</a></br>
<a href='https://github.com/thoughtbot/factory_girl_rails'>Factory Girl Rails</a></br>
<a href='https://github.com/btelles/faker'>Faker</a></br>
<a href='https://github.com/thoughtbot/shoulda-matchers'>Shoulda Matchers</a></br>
<a href='https://github.com/Springest/terminal-notifier-guard'>Terminal Notifier Guard</a></br>
<a href='https://github.com/paulelliott/fabrication'>Fabrication</a></br>
<a href='https://github.com/evansagge/mongoid-rspec'>Mongoid RSpec</a></br></br></p>

<p><h3>Other Resources</h3>
<p>I found this book invaluable in learning best practices in testing: <a href='https://leanpub.com/everydayrailsrspec'>Everday RSpec</a></br>h/t Victoria Friedman</p></p>
]]></content>
  </entry>
  
</feed>
