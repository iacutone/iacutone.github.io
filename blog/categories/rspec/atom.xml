<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Iacutone.rb]]></title>
  <link href="http://iacutone.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-11-20T18:45:41-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shared Contexts With RSpec]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec/"/>
    <updated>2015-11-20T16:45:46-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/20/shared-contexts-with-rspec</id>
    <content type="html"><![CDATA[<p>In the past, I used traits with my factories. Below is a simple example of defining a trait:</p>

<h3>Using traits</h3>

<pre><code class="ruby donations_factories.rb">  FactoryGirl.define do
    factory :donation do
      trait :with_amount do
        amount 10
      end

      trait :no_amount do
        amount 0
      end
    end
  end
</code></pre>

<p>An example spec:</p>

<pre><code class="ruby donation_spec.rb">  RSpec.describe 'Donation Matching', :type =&gt; :model do

    context 'with an amount' do
      let(:donation) { create(:donation, :with_amount) }
    end

    context 'with no amount' do
      let(:donation) { create(:donation, :no_amount) }
    end
  end
</code></pre>

<p>However, I believe that using a shared context is a clearer approach. Defining the amount in a shared context and overriding the amount allows more control over testing use cases.</p>

<h3>Using a shared context</h3>

<pre><code class="ruby donation_spec.rb">  require 'support/shared_contexts/donor_with_donation_context'

  RSpec.describe 'Donation Matching', :type =&gt; :model do
    include_context 'a donor with a donation'

    context 'with an amount' do
      // donation.amount == 10 (defined in the shared context)
    end

    context 'with no amount' do
      let(:amount) { 0 }
      // donation.amount == 0
    end

    context 'with a gnarly' do
      let(:amount) { 09709780 }
    end
  end
</code></pre>

<pre><code class="ruby spec/support/shared_contexts/donor_with_donation_context.rb">  RSpec.shared_context 'a donor with a donation' do
    let(:amount) { 10 }

    let(:donation) { create(:donation, amount: amount) }
  end
</code></pre>

<p>I especially like the shared context approach because you can have shared context and redefine attributes as needed in specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Your Way to Success]]></title>
    <link href="http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success/"/>
    <updated>2013-10-22T21:36:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/10/22/testing-your-way-to-success</id>
    <content type="html"><![CDATA[<p>I have been immersed in production codebases for my <a href='fohrcard.com'>Fohr Card</a> and <a href='http://www.fracturedatlas.org/'>Fractured Atlas</a> projects.  At first, it feel initimidating trying to figure out all of the models and related associations.  I have found that a great way to wrap your head around the code base is to create a new branch and test the code.</p>




<p>A good basic set-up is to start unit testing the models.  In order to do this depends on if your codebase is using a relational database or something like Mongoid.</p>




<h3>Relational Databases</h3>


<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;group :development do</span>
</span><span class='line'><span class="sr">  gem &#39;guard-rspec&#39;, require: false</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">group :test do</span>
</span><span class='line'><span class="sr">   gem &#39;rspec-rails&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;factory_girl_rails&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;faker&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;shoulda-matchers&#39;</span>
</span><span class='line'><span class="sr">   gem &#39;terminal-notifier-guard&#39; </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
    <li>Guard RSpec waits for you to save your files and automatically runs your tests, thereby reducing the time needed to run tests.</li>
    <li>I like the RSpec syntax over Unit Test and Mini Test.</li>
    <li>Factory Girl Rails creates objects for your tests.  This gem deserves its own blog post. </li>
    <li>The Faker Gem is used in conjunction with Factory Girl Rails to create fake data.</li>
    <li>I like to use Shoulda Matchers to test validaitons and associations in the code.  This gem and firing up Rails Console to play with the objects in my testing is the crux to learning a new codebase.</li>
    <li>Some people find Terminal Notifier annoying, but it helps me know if my tests pass when I have Sublime maximized on my 11 inch MacBook Air screen.</li>
</ul>


<p></p>

<h3>Mongoid</h3>


<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;group :development do</span>
</span><span class='line'><span class="sr">  gem &#39;guard-rspec&#39;, require: false</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">group :test do</span>
</span><span class='line'><span class="sr">  gem &#39;fabrication&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;faker&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;rspec-rails&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;mongoid-rspec&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;terminal-notifier-guard&#39; </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>The gems for Mongoid testing are similar to those used in testing with a relational database.<p>
<ul>
    <li>The Fabrication gem is similar to building objects with Factory Girl, except the documentation website <a href='http://www.fabricationgem.org/'>rocks.</a></li>
    <li>The Mongoid RSpec gem is similar to Shoulda-Matchers</li>
</ul></p>

<p><h3>Gems</h3>
<a href='https://github.com/guard/guard-rspec'>Guard RSpec</a></br>
<a href='https://github.com/rspec/rspec-rails'>RSpec Rails</a></br>
<a href='https://github.com/thoughtbot/factory_girl_rails'>Factory Girl Rails</a></br>
<a href='https://github.com/btelles/faker'>Faker</a></br>
<a href='https://github.com/thoughtbot/shoulda-matchers'>Shoulda Matchers</a></br>
<a href='https://github.com/Springest/terminal-notifier-guard'>Terminal Notifier Guard</a></br>
<a href='https://github.com/paulelliott/fabrication'>Fabrication</a></br>
<a href='https://github.com/evansagge/mongoid-rspec'>Mongoid RSpec</a></br></br></p>

<p><h3>Other Resources</h3>
<p>I found this book invaluable in learning best practices in testing: <a href='https://leanpub.com/everydayrailsrspec'>Everday RSpec</a></br>h/t Victoria Friedman</p></p>
]]></content>
  </entry>
  
</feed>
