<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Refactoring | Iacutone Deep Thoughts]]></title>
  <link href="http://iacutone.github.io/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-10-30T22:45:14-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations/"/>
    <updated>2014-01-21T23:46:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations</id>
    <content type="html"><![CDATA[<p> I have been working on refactoring my client side JavaScript validations on an application.  My tech lead gave me some illuminating tips on how to refactor my non-DRY code.  Here is an example of the pre-refactored code.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name %>
        <span id="first_name_error"></span>
      </div>
      <div class="input">
        &lt;%#= f.hidden_field :customer_id, value: current_user.id unless current_user.id == nil %>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email %>
        <span id="email_error"></span>
      </div>
    </div>
  </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>So, let's start with this basic form and sprinkle it with some JQuery and Javascript for client side validations.</p>


<p>{% codeblock users.js lang:js %}
// Initial State for Form
$(&lsquo;.your_info&rsquo;).hide();</p>

<p>// validations
var first_name = $(&lsquo;input#order_first_name&rsquo;);
var last_name = $(&lsquo;input#order_last_name&rsquo;);
var email = $(&lsquo;input#order_email&rsquo;);</p>

<p>// event listeners
first_name.keyup(function(){
  validateFirstName();
});</p>

<p>last_name.keyup(function(){
  validateLastName();
});</p>

<p>email.keyup(function(){
  validateEmail();
});</p>

<p>function validateFirstName(){
  var first_name_val = first_name.val();
  if(first_name_val.length == 0) {
    first_name_error.show().text(&ldquo;First name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    first_name_error.hide();
    return true;
  }
}</p>

<p>function validateLastName(){
  var last_name_val = last_name.val();
  if(last_name_val.length == 0) {
    last_name_error.show().text(&ldquo;Last name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    last_name_error.hide();
    return true;
  }
}</p>

<p>function validateEmail(){
  var email_val = email.val();
  if(email_val.length == 0) {
    email_error.show().text(&ldquo;Email needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    email_error.hide();
    return true;
  }
}
{% endcodeblock %}</p>

<p>Clearly, this is not DRY and will easily get out of comtrol.  However, using HTML data attributes solves this problem.  Here is a good <a href='http://ejohn.org/blog/html-5-data-attributes/'>summary</a> about data attributes by John Resig.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name, :data => {:error => &lsquo;First name&rsquo;} %>
        <span id="first_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name, :data => {:error => &lsquo;Last name&rsquo;} %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email, :data => {:error => &lsquo;Email&rsquo;} %>
        <span id="email_error"></span>
      </div>
    </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>{% codeblock users.js lang:js %}
$(&lsquo;input&rsquo;).keyup(function(){
  blankValidation.call(this);
});</p>

<p>function blankValidation(){
  var error_name = $(this).data(&lsquo;error&rsquo;);
  console.log(error_name);
  var value = $(this).val();
  console.log(value);
  if(error_name !== undefined){
    var error_id = (&lsquo;#&rsquo; + error_name.toLowerCase().replace(&lsquo; &rsquo;, &lsquo;<em>&rsquo;) + (&lsquo;</em>error&rsquo;));
    var error_message = $(error_id);
    if(value.length === 0) {
      error_message.show().text(error_name + &ldquo; needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
      return false;
    }
    else {
      error_message.hide();
      return true;
    }
  }
}
{% endcodeblock %}</p>

<p>We can dynamically call the data attribute for each element.  For example, the error_name value the keyup event(m) will console.log (=> First name, m). The call method allows us to refactor all of our keyup event listeners into one method.  The call method as defined by the Mozilla guide "calls a function with a given this value and arguments provided individually."</p>


<p>h/t Dan Porter</p>




<p>Reference</p>


<ul>
  <li><a href='http://yehudakatz.com/2011/08/11/understanding-JavaScript-function-invocation-and-this/'>Understanding JavaScript Function Invocation and this</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call()</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'>Function.prototype.apply()</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
