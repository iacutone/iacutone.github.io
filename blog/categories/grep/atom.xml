<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grep | Iacutone.rb]]></title>
  <link href="http://iacutone.github.io/blog/categories/grep/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2018-04-16T18:45:14-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Filtering Ack Results]]></title>
    <link href="http://iacutone.github.io/blog/2016/09/15/filtering-ack-results/"/>
    <updated>2016-09-15T09:23:52-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/09/15/filtering-ack-results</id>
    <content type="html"><![CDATA[<p>While setting up my VIM environment, I read a blogpost which states <code>ack</code> can ignore directories. For cleaner <code>ack</code> output you can setup the file below:</p>

<pre><code class="bash .ackrc">--ignore-dir=log
--ignore-dir=public/assets
--ignore-dir=vendor/assets
--ignore-dir=tmp/cache
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find and Replace Text]]></title>
    <link href="http://iacutone.github.io/blog/2016/05/15/find-and-replace-text/"/>
    <updated>2016-05-15T10:28:24-05:00</updated>
    <id>http://iacutone.github.io/blog/2016/05/15/find-and-replace-text</id>
    <content type="html"><![CDATA[<p>If you find yourself in the situation of needing to find and replace text in multiple files, use the Command Line Interface. I wanted to rename a Phoenix application and ran the below command.</p>

<p><code>ack pivotal_commentor -l | xargs sed -i '' 's/pivotal_commentor/commentor/g'</code></p>

<p>Let&rsquo;s break this command down with a simple example.</p>

<pre><code>mkdir test
cd test
touch file1.txt
touch file2.txt
</code></pre>

<p>And lets add the text &lsquo;hello&rsquo; to both text files.</p>

<pre><code>ack hello -l
file1.txt
file2.txt
</code></pre>

<p>ack is like grep and found the files containing the string hello. The -l flag &ldquo;Only print filenames containing matches&rdquo;</p>

<pre><code>ack hello -l | xargs
file1.txt file2.txt
</code></pre>

<p>xargs is a Unix utility that constructs argument lists and is smashing the filenames into one line.</p>

<p>Finally, we pipe the arguments from xargs to sed.</p>

<pre><code>ack hello -l | xargs sed -i '' 's/hello/bye/g'
</code></pre>

<p>The -i flag allows for in place editing on the file. In the regex, the s replaces hello with bye and the g indicates globally, in case hello is found more than once in the file. The &lsquo;&rsquo; is sending the change into the correct output file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep and Scan Methods With Regular Expressions in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby/"/>
    <updated>2013-08-22T18:56:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby</id>
    <content type="html"><![CDATA[<p>I am creating an app to provide food cart locations in Manhattan.  <a href='https://github.com/iacutone/food-truck'>Here</a> is the code.  Food carts generally post their locations on Twitter; in order to create latitude and longitude coordinates, I needed to parse tweets.  This is where scan and grep play their role, to match elements in a tweet string.  Let's say this is our tweet: "53rd and park. Ready by 11!"  This string is database column in my locations model.</p>




<p>Code for scan method.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet = "53rd and park. Ready by 11!"
tweet.scan(/53/)
# =&gt; ["53"] 
tweet.scan(/Park/i)
# =&gt; ["park"]
</code></pre>

<p>{% endcodeblock %}</p>

<p>The scan method takes a string as an input.  Also, the i is used in the regular expression in order to make it case insensitive.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet.scan(/Park/)
#  =&gt; [] 
</code></pre>

<p>{% endcodeblock %}</p>

<p>Code for grep method.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet = "53rd and park. Ready by 11!"
tweet_array = tweet.split
# =&gt; ["53rd", "and", "park.", "Ready", "by", "11!"] 
tweet_array.grep(/53/)
# =&gt; ["53rd"]
tweet_array.grep(/Park/i)
# =&gt; ["park."]
</code></pre>

<p>{% endcodeblock %}</p>

<p><p>The grep method takes an array as an input, so use the string split method to turn it into an array seperated by commas.  Also, the regular expression matches the entire string.  The grep method seems to be more suited as an alternative for the select and map methods.  <a href='http://zigzag.github.io/2010/03/31/grep-in-ruby----a-powerful-enumerable-method.html'>This</a> blog post goes into further detail explaining more cases to use the grep method over more familiar methods.<p></p>
]]></content>
  </entry>
  
</feed>
