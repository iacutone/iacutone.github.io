<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Iacutone Deep Thoughts]]></title>
  <link href="http://iacutone.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-10-30T22:45:14-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Setter Method in a Rails Model]]></title>
    <link href="http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model/"/>
    <updated>2015-10-23T15:30:53-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/10/23/the-setter-method-in-a-rails-model</id>
    <content type="html"><![CDATA[<p>At Fractured Atlas, we are trying to move away from the additional complexity of using callbacks. For example, let&rsquo;s say we need to do something in a before_save callback such as lowercase a user&rsquo;s email.</p>

<pre><code class="ruby user.rb">
before_save: lowercase_email

def lowercase_email
  self.email = self.email.downcase
end
</code></pre>

<p>How is this code implemented without using before_save? One method would be overriding the setter accessor.</p>

<pre><code class="ruby user.rb">
def email=(value)
 email = value.downcase
 super(email)
end
</code></pre>

<p>Now, when the email attribute is updated, my email setter method is called.</p>

<p>Currently, both implementations for downcasing an email are straightforward. However, as the application grows, the before_save callback is more difficult to test and maintain. The before_save is implicit and might have unexpected side effects. Here is a basic spec.</p>

<pre><code class="ruby user_spec.rb">
describe User do

  let(:user) { FactoryGirl.create(:user) }

  describe '#lowercase_email' do
    before { user.email = 'GNARLY@email.com' }

    it 'lowercases the email' do
      expect(user.lowercase_email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>Instead, let&rsquo;s test the <em>behavior</em> of what we expect.</p>

<pre><code class="ruby user_creation_spec.rb">
describe 'User Creation' do
  let(:user) { FactoryGirl.create(:user) }

  describe ':email' do
    before { user.email = 'GNARLY@email.com' }

    'it returns a standardized email' do
      expect(user.email).to eq 'gnarly@email.com'
    end
  end
end
</code></pre>

<p>The first spec is directly testing the callback, whereas the latter spec is testing the <em>behavior</em> of the expected outcome. The latter spec is easier to reason about and change. This is an easy example, but as callbacks grow changing their behavior becomes more difficult. This is especially true if the callbacks are coupled with other models.</p>

<p><em>Helpful Links</em></p>

<p><a href="http://stackoverflow.com/questions/10464793/what-is-the-right-way-to-override-a-setter-method-in-ruby-on-rails">What is the right way to override a setter method in Ruby on Rails?</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord%3a%3aBase-label-Overwriting+default+accessors">Overwriting default accessors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Fetch Method]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method/"/>
    <updated>2015-09-18T18:15:29-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/18/rubys-fetch-method</id>
    <content type="html"><![CDATA[<p>Checking for values in a Rails params hash is complicated. In this post we will use the #fetch method to ensure nil is not called on a params hash.</p>

<pre><code class="ruby searches_helper.rb">  if params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>The code above will call #present? on nil if params[:search][:organization_id] does not exist.</p>

<p>A better way to write the conditional:</p>

<pre><code class="ruby searches_helper.rb">  if params[:search].present and params[:search][:organization_id].present?
    # do things
  end
</code></pre>

<p>Writing a similar conditional with #fetch:</p>

<pre><code class="ruby searches_helper.rb">  if params.fetch(:search, {}).fetch(:organization_id, nil).present?
    # do things
  end
</code></pre>

<p>Let&rsquo;s break this method down into simpler components:</p>

<pre><code class="ruby">  params = {}
  puts params.fetch(:search, {})
  // {}

  params[:search] = "searched!"
  puts params.fetch(:search, {})
  // "searched!"

  puts fetch(:organization_id, nil)
  // nil

  params[:organization_id] = 1
  puts params.fetch(:organization_id, nil)
  // 1
</code></pre>

<p>I like the ability to call #fetch with a default return value if one does not exist. This leads to better ways to handle nil or catch errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exceptions in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2014/02/16/exceptions-in-ruby/"/>
    <updated>2014-02-16T18:40:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/02/16/exceptions-in-ruby</id>
    <content type="html"><![CDATA[<p>I inherited some interesting code last week.  A user has the ability to sign into the website with omniauth.</p>


<p>{% codeblock lang:ruby %}
def num
    puts &ldquo;Enter a number&rdquo;
    num = gets.chomp.to_i</p>

<pre><code>if num == 3
    puts "It's a 3!"
    else
        raise "Wrong number, you entered a #{num}"
end
</code></pre>

<p>end</p>

<p>def num2
    num
end</p>

<p>begin
    num2
rescue Exception => ex
    puts ex
end
{% endcodeblock %}</p>

<p>Reference</p>


<p><a href='http://www.ruby-doc.org/core-2.1.0/Exception.html'>Ruby Exception Class</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Client Side Validations]]></title>
    <link href="http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations/"/>
    <updated>2014-01-21T23:46:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2014/01/21/refactoring-client-side-validations</id>
    <content type="html"><![CDATA[<p> I have been working on refactoring my client side JavaScript validations on an application.  My tech lead gave me some illuminating tips on how to refactor my non-DRY code.  Here is an example of the pre-refactored code.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name %>
        <span id="first_name_error"></span>
      </div>
      <div class="input">
        &lt;%#= f.hidden_field :customer_id, value: current_user.id unless current_user.id == nil %>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email %>
        <span id="email_error"></span>
      </div>
    </div>
  </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>So, let's start with this basic form and sprinkle it with some JQuery and Javascript for client side validations.</p>


<p>{% codeblock users.js lang:js %}
// Initial State for Form
$(&lsquo;.your_info&rsquo;).hide();</p>

<p>// validations
var first_name = $(&lsquo;input#order_first_name&rsquo;);
var last_name = $(&lsquo;input#order_last_name&rsquo;);
var email = $(&lsquo;input#order_email&rsquo;);</p>

<p>// event listeners
first_name.keyup(function(){
  validateFirstName();
});</p>

<p>last_name.keyup(function(){
  validateLastName();
});</p>

<p>email.keyup(function(){
  validateEmail();
});</p>

<p>function validateFirstName(){
  var first_name_val = first_name.val();
  if(first_name_val.length == 0) {
    first_name_error.show().text(&ldquo;First name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    first_name_error.hide();
    return true;
  }
}</p>

<p>function validateLastName(){
  var last_name_val = last_name.val();
  if(last_name_val.length == 0) {
    last_name_error.show().text(&ldquo;Last name needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    last_name_error.hide();
    return true;
  }
}</p>

<p>function validateEmail(){
  var email_val = email.val();
  if(email_val.length == 0) {
    email_error.show().text(&ldquo;Email needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
    return false;
  }
  else {
    email_error.hide();
    return true;
  }
}
{% endcodeblock %}</p>

<p>Clearly, this is not DRY and will easily get out of comtrol.  However, using HTML data attributes solves this problem.  Here is a good <a href='http://ejohn.org/blog/html-5-data-attributes/'>summary</a> about data attributes by John Resig.</p>


<p>{% codeblock _form.html.erb lang:erb %}
&lt;%= form_for(@order) do |f| %>
  <div class='your_info'>
    <h3>2. Your Information</h3>
    <div class="clearfix">
      &lt;%= f.label :first_name, &lsquo;First name<em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :first_name, :data => {:error => &lsquo;First name&rsquo;} %>
        <span id="first_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :last_name, &lsquo;Last name</em>&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :last_name, :data => {:error => &lsquo;Last name&rsquo;} %>
        <span id="last_name_error"></span>
      </div>
    </div>
    <div class="clearfix">
      &lt;%= f.label :email, &lsquo;Email*&rsquo; %>
      <div class="input">
        &lt;%= f.text_field :email, :data => {:error => &lsquo;Email&rsquo;} %>
        <span id="email_error"></span>
      </div>
    </div>
  &lt;%= f.submit &ldquo;Submit your Order&rdquo;, class: &lsquo;btn btn-primary btn-lg&rsquo;, id: &lsquo;button&rsquo;, data: { confirm: &ldquo;Place order?&rdquo; } %>
&lt;% end %>
{% endcodeblock %}</p>

<p>{% codeblock users.js lang:js %}
$(&lsquo;input&rsquo;).keyup(function(){
  blankValidation.call(this);
});</p>

<p>function blankValidation(){
  var error_name = $(this).data(&lsquo;error&rsquo;);
  console.log(error_name);
  var value = $(this).val();
  console.log(value);
  if(error_name !== undefined){
    var error_id = (&lsquo;#&rsquo; + error_name.toLowerCase().replace(&lsquo; &rsquo;, &lsquo;<em>&rsquo;) + (&lsquo;</em>error&rsquo;));
    var error_message = $(error_id);
    if(value.length === 0) {
      error_message.show().text(error_name + &ldquo; needed.&rdquo;).addClass(&lsquo;error_class&rsquo;);
      return false;
    }
    else {
      error_message.hide();
      return true;
    }
  }
}
{% endcodeblock %}</p>

<p>We can dynamically call the data attribute for each element.  For example, the error_name value the keyup event(m) will console.log (=> First name, m). The call method allows us to refactor all of our keyup event listeners into one method.  The call method as defined by the Mozilla guide "calls a function with a given this value and arguments provided individually."</p>


<p>h/t Dan Porter</p>




<p>Reference</p>


<ul>
  <li><a href='http://yehudakatz.com/2011/08/11/understanding-JavaScript-function-invocation-and-this/'>Understanding JavaScript Function Invocation and this</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call()</a></li>
  <li><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'>Function.prototype.apply()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep and Scan Methods With Regular Expressions in Ruby]]></title>
    <link href="http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby/"/>
    <updated>2013-08-22T18:56:00-05:00</updated>
    <id>http://iacutone.github.io/blog/2013/08/22/grep-and-scan-regular-expressions-in-ruby</id>
    <content type="html"><![CDATA[<p>I am creating an app to provide food cart locations in Manhattan.  <a href='https://github.com/iacutone/food-truck'>Here</a> is the code.  Food carts generally post their locations on Twitter; in order to create latitude and longitude coordinates, I needed to parse tweets.  This is where scan and grep play their role, to match elements in a tweet string.  Let's say this is our tweet: "53rd and park. Ready by 11!"  This string is database column in my locations model.</p>




<p>Code for scan method.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet = "53rd and park. Ready by 11!"
tweet.scan(/53/)
# =&gt; ["53"] 
tweet.scan(/Park/i)
# =&gt; ["park"]
</code></pre>

<p>{% endcodeblock %}</p>

<p>The scan method takes a string as an input.  Also, the i is used in the regular expression in order to make it case insensitive.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet.scan(/Park/)
#  =&gt; [] 
</code></pre>

<p>{% endcodeblock %}</p>

<p>Code for grep method.</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code>tweet = "53rd and park. Ready by 11!"
tweet_array = tweet.split
# =&gt; ["53rd", "and", "park.", "Ready", "by", "11!"] 
tweet_array.grep(/53/)
# =&gt; ["53rd"]
tweet_array.grep(/Park/i)
# =&gt; ["park."]
</code></pre>

<p>{% endcodeblock %}</p>

<p><p>The grep method takes an array as an input, so use the string split method to turn it into an array seperated by commas.  Also, the regular expression matches the entire string.  The grep method seems to be more suited as an alternative for the select and map methods.  <a href='http://zigzag.github.io/2010/03/31/grep-in-ruby----a-powerful-enumerable-method.html'>This</a> blog post goes into further detail explaining more cases to use the grep method over more familiar methods.<p></p>
]]></content>
  </entry>
  
</feed>
