<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Iacutone Deep Thoughts]]></title>
  <link href="http://iacutone.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2015-11-07T13:50:41-05:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Basics]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/09/swift-basics/"/>
    <updated>2015-09-09T18:48:12-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/09/swift-basics</id>
    <content type="html"><![CDATA[<h1>String Interpolation</h1>

<pre><code class="swift">
var name = "Eric"

println("Hello, \(name)")

// "Hello, Eric"
</code></pre>

<h1>Dictionaries</h1>

<pre><code class="swift">var response = ["id":14,"email":"test@email.com"]

let id = response["id"]

// 14

let email = response["email"]

// "test@email.com"
</code></pre>

<h1>Tuples</h1>

<h3>Unnamed Tuples</h3>

<pre><code class="swift">
var coordinates = (100, 999)

let (lat, lon) = coordinates

println("Latitude is \(lat)")

// "Latitude is 100"

println("Longtitude is \(lon)")

// Longitude is 999
</code></pre>

<h3>Named Tuples</h3>

<pre><code class="swift">var response = (code: 200, message: "All good")

response.0
// 200

response.1
// "All good"

response.code
// 200

respsonse.message
// "All good"
</code></pre>

<h1>Swift Classes</h1>

<h3>Creating a class</h3>

<pre><code class="swift Person.swift">
class Person: NSObject {
  var name: String
  var email: String
  var zip: Int

  init(name: String, email: String, zip: Int) {
    self.name = name
    self.email = email
    self.zip = zip
    super.init()
  }
}
</code></pre>

<h3>Create data for Person Class</h3>

<pre><code class="swift SampleData.swift">
let personData = [
  Person(name: "Eric", email: "eric.iacutone@gmail.com", zip: 12345)
]
</code></pre>

<h3>Instantiating Person Class</h3>

<pre><code class="swift PersonViewController.swift">
var person:Array = personData
</code></pre>

<p>Now, if you copy and paste the the files into a XCode Playground, you can call methods on your person object.</p>

<pre><code class="swift Playground.swift">
person.count
// 1

person.first?.zip
// 12345
</code></pre>

<h1>Enums</h1>

<p>An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code. - <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html">Swift docs</a></p>

<p>Use an enum when you need a consistent data value.</p>

<pre><code class="swift">
enum CountryType:String {
    case UnitedStates = "United States"
    case Spain = "Spain"

    init() {
      self = .UnitedStates
    }
}

var type = CountryType.UnitedStates.rawValue

// "United States"
</code></pre>

<h1>Structs</h1>

<p>A struct allows you to create a structured data type which provides storage of data using properties and extending its functionality via methods. -<a href="http://blog.teamtreehouse.com/enums-structs-swift">Tree House</a></p>

<pre><code class="swift">
struct Person {
    var name: String
    var email: String
    var country: CountryType
}

var person = Person(name: "Eric", email: "eric.iacutone@gmail.com", country: CountryType.UnitedStates)

person.name

// "Eric"

person.country.rawValue

// "United States"
</code></pre>
]]></content>
  </entry>
  
</feed>
