<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Iacutone.rb]]></title>
  <link href="http://iacutone.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://iacutone.github.io/"/>
  <updated>2017-08-19T13:48:51-04:00</updated>
  <id>http://iacutone.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ENV Variables in XCode]]></title>
    <link href="http://iacutone.github.io/blog/2015/12/03/env-variables-in-xcode/"/>
    <updated>2015-12-03T18:02:14-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/12/03/env-variables-in-xcode</id>
    <content type="html"><![CDATA[<p>Setting ENV variables in XCode in not straighforward. I have broken down how to accomplish setting up an ENV variable in the following videos and code example.</p>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/r5HZwbkA52I" allowfullscreen></iframe></div>
Make a new conifuration file and set any ENV variables you need.</p>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/jwuQgWb58Xs" allowfullscreen></iframe></div>
In the debug environment, use the debug.xcconfig file. Then, assign the value to something, in this case, SignUpUrl corresponds with the SIGN_UP_URL, which is set to localhost:4567/sign_up.</p>

<pre><code class="swift SignUpController.swift">  var info:[NSObject:AnyObject] = NSBundle.mainBundle().infoDictionary!
  var sign_up_url = info["SignUpUrl"] as! String
</code></pre>

<p>The sign_up_url variable is set to localhost:4567/signup.</p>

<p>Helpful Links</p>

<p><a href="http://bogardon.github.io/xcode/environment-variables/2013/05/20/configuring-env-variables-in-xcode.html">Configuring ENV Variables in XCode</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout Xcode for Navigation Bar]]></title>
    <link href="http://iacutone.github.io/blog/2015/11/13/auto-layout-xcode-for-navigation-bar/"/>
    <updated>2015-11-13T19:03:02-05:00</updated>
    <id>http://iacutone.github.io/blog/2015/11/13/auto-layout-xcode-for-navigation-bar</id>
    <content type="html"><![CDATA[<p>Finding auto layout information is difficult. The steps below pin a navigation bar to the top of the screen for all iOS devices.</p>

<p><img class="center" src="/images/constraints.gif" title="" ></p>

<h3>Steps</h3>

<ul>
<li>Make sure &ldquo;Navigation Bar&rdquo; is selected on the left menu</li>
<li>Click the &ldquo;Pin&rdquo; button on the bottom right corner</li>
<li>Click the top, left and right constraints</li>
<li>Click the Height constraint</li>
<li>Add the 4 contraints</li>
</ul>


<p>The above steps &ldquo;pin&rdquo; the navigation bar object to the top of the view and stretch the navigation bar to the sides of the view. The height constraint keeps a static height for the navigation bar.</p>

<p>Helpful Links</p>

<p><a href="https://github.com/codepath/ios_guides/wiki/Auto-Layout-Basics">Auto Layout Basics</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Basics]]></title>
    <link href="http://iacutone.github.io/blog/2015/09/09/swift-basics/"/>
    <updated>2015-09-09T19:48:12-04:00</updated>
    <id>http://iacutone.github.io/blog/2015/09/09/swift-basics</id>
    <content type="html"><![CDATA[<h1>String Interpolation</h1>

<pre><code class="swift">
var name = "Eric"

println("Hello, \(name)")

// "Hello, Eric"
</code></pre>

<h1>Dictionaries</h1>

<pre><code class="swift">var response = ["id":14,"email":"test@email.com"]

let id = response["id"]

// 14

let email = response["email"]

// "test@email.com"
</code></pre>

<h1>Tuples</h1>

<h3>Unnamed Tuples</h3>

<pre><code class="swift">
var coordinates = (100, 999)

let (lat, lon) = coordinates

println("Latitude is \(lat)")

// "Latitude is 100"

println("Longtitude is \(lon)")

// Longitude is 999
</code></pre>

<h3>Named Tuples</h3>

<pre><code class="swift">var response = (code: 200, message: "All good")

response.0
// 200

response.1
// "All good"

response.code
// 200

respsonse.message
// "All good"
</code></pre>

<h1>Swift Classes</h1>

<h3>Creating a class</h3>

<pre><code class="swift Person.swift">
class Person: NSObject {
  var name: String
  var email: String
  var zip: Int

  init(name: String, email: String, zip: Int) {
    self.name = name
    self.email = email
    self.zip = zip
    super.init()
  }
}
</code></pre>

<h3>Create data for Person Class</h3>

<pre><code class="swift SampleData.swift">
let personData = [
  Person(name: "Eric", email: "eric.iacutone@gmail.com", zip: 12345)
]
</code></pre>

<h3>Instantiating Person Class</h3>

<pre><code class="swift PersonViewController.swift">
var person:Array = personData
</code></pre>

<p>Now, if you copy and paste the the files into a XCode Playground, you can call methods on your person object.</p>

<pre><code class="swift Playground.swift">
person.count
// 1

person.first?.zip
// 12345
</code></pre>

<h1>Enums</h1>

<p>An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code. - <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html">Swift docs</a></p>

<p>Use an enum when you need a consistent data value.</p>

<pre><code class="swift">
enum CountryType:String {
    case UnitedStates = "United States"
    case Spain = "Spain"

    init() {
      self = .UnitedStates
    }
}

var type = CountryType.UnitedStates.rawValue

// "United States"
</code></pre>

<h1>Structs</h1>

<p>A struct allows you to create a structured data type which provides storage of data using properties and extending its functionality via methods. -<a href="http://blog.teamtreehouse.com/enums-structs-swift">Tree House</a></p>

<pre><code class="swift">
struct Person {
    var name: String
    var email: String
    var country: CountryType
}

var person = Person(name: "Eric", email: "eric.iacutone@gmail.com", country: CountryType.UnitedStates)

person.name

// "Eric"

person.country.rawValue

// "United States"
</code></pre>
]]></content>
  </entry>
  
</feed>
